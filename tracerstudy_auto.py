# -*- coding: utf-8 -*-
"""TracerStudy_Auto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvYspKq43G-_aV9SiP6rHA5okcY64dhc

# **RUN ALL**

---

To run all the program, simply press Ctrl+F9 (Windows) or Cmd+F9 (MAC)

# **INPUT PRODI**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
from plotly.subplots import make_subplots
from matplotlib.ticker import FormatStrFormatter
from babel.numbers import format_currency
from google.colab import drive
from google.colab import auth
from googleapiclient.discovery import build

# Authenticate and authorize access
auth.authenticate_user()

# Create a Google Drive API client
drive_service = build('drive', 'v3')

#!pip install -U kaleido
prodi = input("Prodi: ")

# Mount Google Drive
drive.mount('/content/drive')

"""# **FUNCTIONS**"""

def accessDrive(file_name):
  from google.oauth2 import service_account
  import googleapiclient.discovery
  import pandas as pd

  # Load the service account credentials
  credentials = service_account.Credentials.from_service_account_file('/content/tracer-study-389201-b01a5c8bd7ee.json')

  # Create a Google Drive API client
  drive_service = googleapiclient.discovery.build('drive', 'v3', credentials=credentials)

  # Specify the file name
  file_name = file_name

  # Search for the file by name
  query = "name = '{}'".format(file_name)
  response = drive_service.files().list(q=query).execute()

  # Extract the file ID from the response
  file_id = response['files'][0]['id']

  # Export the file as a pandas DataFrame
  export_url = f"https://docs.google.com/spreadsheets/d/{file_id}/export?format=xlsx"
  df = pd.ExcelFile(export_url)

  # return the DataFrame
  return(df)

"""# **CREATE FOLDERS**"""

folder_name = 'Tracer Study'
folder_metadata = {
    'name': folder_name,
    'mimeType': 'application/vnd.google-apps.folder'
}
parent_folder = drive_service.files().create(body=folder_metadata, fields='id').execute()
parent_folder_id = parent_folder['id']

subfolder_name = prodi
subfolder_metadata = {
    'name': subfolder_name,
    'mimeType': 'application/vnd.google-apps.folder',
    'parents': [parent_folder_id]
}
subfolder = drive_service.files().create(body=subfolder_metadata, fields='id').execute()

"""# **READ DATA RESPONDEN**"""

#xls = pd.ExcelFile('/content/drive/MyDrive/Tracer Study/Data responden 2018-2022.xlsx')
xls = accessDrive('Data responden 2018-2022.xlsx')
sheet_names = xls.sheet_names

for i, sheet_name in enumerate(sheet_names):
    var_name = 'DR{}'.format(i + 1)
    globals()[var_name] = pd.read_excel(xls, sheet_name)

"""# **READ DATA ANALISIS TREN**"""

#xls = pd.ExcelFile('/content/drive/MyDrive/Tracer Study/Data Mentah Sortir_Analisis Tren_v3.xlsx')
xls = accessDrive('Data Mentah Sortir_Analisis Tren_v3.xlsx')
sheet_names = xls.sheet_names

# Filter out non-year sheet names
sheet_names = [sheet_name for sheet_name in sheet_names if sheet_name.isdigit()]

for i, sheet_name in enumerate(sheet_names):
    var_name = 'sh{}'.format(i + 1)
    globals()[var_name] = pd.read_excel(xls, sheet_name)

"""# **READ DATA USER SURVEY**"""

#xls = pd.ExcelFile('/content/drive/MyDrive/Tracer Study/Data Mentah Kuesioner User Survey_Analisis Tren_v3.xlsx')
xls = accessDrive('Data Mentah Kuesioner User Survey_Analisis Tren_v3.xlsx')
sheet_names = xls.sheet_names

# Filter out the "CATATAN" sheet
sheet_names = [sheet_name for sheet_name in sheet_names if sheet_name != 'CATATAN']

for i, sheet_name in enumerate(sheet_names):
    var_name = 's{}'.format(i + 1)
    globals()[var_name] = pd.read_excel(xls, sheet_name)

"""# **DATA RESPONDEN**"""

years = ['22', '21', '20', '19', '18']

for i, year in enumerate(years):
  var_name = 'DR{}'.format(i+1)
  globals()["R{}".format(year)] = globals()[var_name].query("PRODI == @prodi").loc[:, ['%','Total Alumni (N)']]
  globals()["R{}".format(year)]['Tahun']= int(year)+2000

result = pd.concat([R22, R21, R20, R19, R18])
#result['%'] = (result['%']*100).round(2)
#rgba(193,4,4,255), rgba(128,100,162,255), rgba(3,176,82,255), rgba(247,150,69,255), rgba(65,112,192,255)
result['%'] = result['%']*100
colors = ['rgba(185,74,72,255)',
          'rgba(126,98,159,255)',
          'rgba(3,176,82,255)',
          'rgba(247,150,69,255)',
          'rgba(79,129,189,255)']

# Create a bar trace
trace = go.Bar(
    x=result['Tahun'],
    y=result['%'],
    text=result.apply(lambda row: f"[{round(row['Total Alumni (N)'])}]; {round(row['%'])}%", axis=1),  # Generate annotations
    textposition='outside',  # Position annotations outside the bars
    marker=dict(color=colors, line=dict(width=[0.5]*len(result['Tahun']))),
)

# Create a layout
layout = go.Layout(
    showlegend=False,
    width=2000,  # Set width in pixels
    height=1200  # Set height in pixels
)

# Create a figure
fig = go.Figure(data=[trace], layout=layout)

fig.update_yaxes(tickvals=list(range(0, 101, 10)), 
                 ticktext=[f'{round(x)}%' for x in range(0, 101, 10)])

# Set axis tick font size
fig.update_layout(
    xaxis_tickfont=dict(size=30),
    yaxis_tickfont=dict(size=30)
)

fig.update_traces(
    textfont=dict(size=30),
)
# Save the figure
dir = "/content/drive/MyDrive/Tracer Study/{}/DataResponden.png".format(prodi)
pio.write_image(fig, dir)

# Show the figure
fig.show()

"""# **STATUS PEKERJAAN**"""

years = ['22', '21', '20', '19', '18']

for i, year in enumerate(years):
  var_name = 'sh{}'.format(len(years)-i)
  globals()["df{}".format(year)] = globals()[var_name].loc[globals()[var_name]['Program Studi'] == prodi].filter(like = 'Pekerjaan utama saat ini?', axis = 1)

N_Data = pd.DataFrame({'Tahun':['2018','2019','2020','2021','2022'],
                       'N':[len(df18),len(df19),len(df20),len(df21),len(df22)]})
for year in years:
  var_name = "df{}".format(year)
  globals()["k{}".format(year)] = len(globals()[var_name][globals()[var_name]["Pekerjaan utama saat ini?"].str.casefold() == "bekerja"])
  globals()["tk{}".format(year)] = len(globals()[var_name][globals()[var_name]["Pekerjaan utama saat ini?"].str.casefold() == "tidak bekerja"])
  globals()["w{}".format(year)] = len(globals()[var_name][globals()[var_name]["Pekerjaan utama saat ini?"].str.casefold() == "wirausaha"])
  globals()["bw{}".format(year)] = len(globals()[var_name][globals()[var_name]["Pekerjaan utama saat ini?"].str.casefold() == "bekerja dan wiraswasta"])
  globals()["m{}".format(year)] = len(globals()[var_name][globals()[var_name]["Pekerjaan utama saat ini?"].str.casefold() == "melanjutkan studi"])

result = pd.DataFrame({'Tahun':['2018','2019','2020','2021','2022'],
                       'Bekerja':[k18,k19,k20,k21,k22],
                       'Wirausaha':[w18,w19,w20,w21,w22],
                       'Bekerja dan Wiraswasta':[bw18,bw19,bw20,bw21,bw22],
                       'Tidak Bekerja':[tk18,tk19,tk20,tk21,tk22],
                       'Melanjutkan Studi':[m18,m19,m20,m21,m22]})

# Melt the dataframe to convert it to long format
result_melted = result.melt(id_vars='Tahun', value_vars=['Bekerja', 'Wirausaha', 'Bekerja dan Wiraswasta', 'Tidak Bekerja', 'Melanjutkan Studi'])

# Calculate the total value for each year
result_melted['total'] = result_melted.groupby('Tahun')['value'].transform('sum')

# Calculate the percentage for each value
result_melted['percentage'] = (result_melted['value'] / result_melted['total']) * 100
custom = result_melted['value']

fig = px.bar(result_melted, x='variable', y='percentage', color='Tahun', barmode='group', 
             color_discrete_sequence=['rgba(79,129,189,255)',
                                      'rgba(247,150,70,255)',
                                      'rgba(149,181,84,255)',
                                      'rgba(126,98,159,255)',
                                      'rgba(185,74,72,255)'])

fig.update_xaxes(title_text='')
fig.update_yaxes(title_text='')
fig.update_traces(texttemplate='%{y:.0f}%', 
                  textposition='outside', 
                  #customdata=result_melted['value'],
                  textfont=dict(size=30),
                  )

fig.update_yaxes(tickvals=list(range(0, 110, 10)), 
                 ticktext=[f'{x}%' for x in range(0, 110, 10)])

fig.update_layout(
    width=3000,
    height=1500,
    xaxis_tickfont=dict(size=26),
    yaxis_tickfont=dict(size=26),
    legend=dict(font=dict(size=30))
)

dir = "/content/drive/MyDrive/Tracer Study/{}/StatusPekerjaan.png".format(prodi)
pio.write_image(fig, dir)
fig.show()

"""# **KOMPETENSI ALUMNI**"""

a22=pd.DataFrame([sh5.loc[sh5['Program Studi'] == prodi].iloc[:, 8:31].mean(axis=0)])
a21=pd.DataFrame([sh4.loc[sh4['Program Studi'] == prodi].iloc[:, 8:31].mean(axis=0)])
a20=pd.DataFrame([sh3.loc[sh3['Program Studi'] == prodi].iloc[:, 7:30].mean(axis=0)])
a19=pd.DataFrame([sh2.loc[sh2['Program Studi'] == prodi].iloc[:, 7:30].mean(axis=0)])
a18=pd.DataFrame([sh1.loc[sh1['Program Studi'] == prodi].iloc[:, 6:29].mean(axis=0)])

b22=pd.DataFrame([sh5.loc[sh5['Program Studi'] == prodi].iloc[:, 31:54].mean(axis=0)])
b21=pd.DataFrame([sh4.loc[sh4['Program Studi'] == prodi].iloc[:, 31:54].mean(axis=0)])
b20=pd.DataFrame([sh3.loc[sh3['Program Studi'] == prodi].iloc[:, 30:53].mean(axis=0)])
b19=pd.DataFrame([sh2.loc[sh2['Program Studi'] == prodi].iloc[:, 30:53].mean(axis=0)])
b18=pd.DataFrame([sh1.loc[sh1['Program Studi'] == prodi].iloc[:, 29:52].mean(axis=0)])

c22=pd.DataFrame([sh5.loc[sh5['Program Studi'] == prodi].iloc[:, 54:77].mean(axis=0)])
c21=pd.DataFrame([sh4.loc[sh4['Program Studi'] == prodi].iloc[:, 54:77].mean(axis=0)])
c20=pd.DataFrame([sh3.loc[sh3['Program Studi'] == prodi].iloc[:, 53:76].mean(axis=0)])
c19=pd.DataFrame([sh2.loc[sh2['Program Studi'] == prodi].iloc[:, 53:76].mean(axis=0)])
c18=pd.DataFrame([sh1.loc[sh1['Program Studi'] == prodi].iloc[:, 52:75].mean(axis=0)])

years = ['22', '21', '20', '19', '18']

for year in years:
    a_df = globals()["a{}".format(year)]
    b_df = globals()["b{}".format(year)]
    c_df = globals()["c{}".format(year)]
    
    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
          r=list(a_df.iloc[0,:]) + [a_df.iloc[0, 0], a_df.iloc[0, 0]],
          theta=list(a_df.columns) + [a_df.columns[0], a_df.columns[0]],
          name='Kompetensi yang Dikuasai',
          line=dict(color='rgba(79,129,189,255)',width=5),
          mode='lines+markers',
          marker=dict(size=11),
    ))
    fig.add_trace(go.Scatterpolar(
          r=list(b_df.iloc[0,:]) + [b_df.iloc[0, 0], b_df.iloc[0, 0]],
          theta=list(a_df.columns) + [a_df.columns[0], a_df.columns[0]],
          name='Kontribusi Perguruan Tinggi',
          line=dict(color='rgba(185,74,72,255)',width=5),
          mode='lines+markers',
          marker=dict(size=11),
    ))
    fig.add_trace(go.Scatterpolar(
          r=list(c_df.iloc[0,:]) + [c_df.iloc[0, 0], c_df.iloc[0, 0]],
          theta=list(a_df.columns) + [a_df.columns[0], a_df.columns[0]],
          name='Peran Kompetensi',
          line=dict(color='rgba(149,181,84,255)',width=5),
          mode='lines+markers',
          marker=dict(size=11),
    ))

    fig.update_layout(
    polar=dict(
        radialaxis=dict(
            visible=True,
            tickfont=dict(size=24),
            range=[0, 5],
            gridcolor='rgba(0,0,0,0.3)',
            tickvals=[0, 1, 2, 3, 4, 5],
            ticktext=[0, 1, 2, 3, 4, 5],
            tickmode='array',
            tickformat=',d'
        ),
        angularaxis=dict(
            tickfont=dict(size=24),
            rotation=90,
            direction='clockwise',
            gridcolor='darkblue'
        )
    ),
    showlegend=True,
    legend=dict(
        font=dict(size=24),
        x=0.1,
        y=0,
        traceorder='normal',
        bgcolor='rgba(0,0,0,0)'
    ),
    title="<b>Tahun 20{}<b>".format(year),
    title_font=dict(size=36),
    title_x=0.5
    )

    dir = "/content/drive/MyDrive/Tracer Study/{}/KA20{}.png".format(prodi, year)  # Set filename based on year
    pio.write_image(fig, dir, width=3100, height=1100)
    fig.show()

"""**LARGEST TREND VALUE**"""

#Largest
L22a = a22.T.nlargest(5,[0])
L22a['Kategori'] = "Penguasaan Kompetensi"
L22b = b22.T.nlargest(5,[0])
L22b['Kategori'] = "Kontribusi Perguruan Tinggi"
L22c = c22.T.nlargest(5,[0])
L22c['Kategori'] = "Peran Kompetensi"
L22 = round(pd.concat([L22a, L22b, L22c]),2)
L22['Tahun'] = "2022"

L21a = a21.T.nlargest(5,[0])
L21a['Kategori'] = "Penguasaan Kompetensi"
L21b = b21.T.nlargest(5,[0])
L21b['Kategori'] = "Kontribusi Perguruan Tinggi"
L21c = c21.T.nlargest(5,[0])
L21c['Kategori'] = "Peran Kompetensi"
L21 = round(pd.concat([L21a, L21b, L21c]),2)
L21['Tahun'] = "2021"

L20a = a20.T.nlargest(5,[0])
L20a['Kategori'] = "Penguasaan Kompetensi"
L20b = b20.T.nlargest(5,[0])
L20b['Kategori'] = "Kontribusi Perguruan Tinggi"
L20c = c20.T.nlargest(5,[0])
L20c['Kategori'] = "Peran Kompetensi"
L20 = round(pd.concat([L20a, L20b, L20c]),2)
L20['Tahun'] = "2020"

L19a = a19.T.nlargest(5,[0])
L19a['Kategori'] = "Penguasaan Kompetensi"
L19b = b19.T.nlargest(5,[0])
L19b['Kategori'] = "Kontribusi Perguruan Tinggi"
L19c = c19.T.nlargest(5,[0])
L19c['Kategori'] = "Peran Kompetensi"
L19 = round(pd.concat([L19a, L19b, L19c]),2)
L19['Tahun'] = "2019"

L18a = a18.T.nlargest(5,[0])
L18a['Kategori'] = "Penguasaan Kompetensi"
L18b = b18.T.nlargest(5,[0])
L18b['Kategori'] = "Kontribusi Perguruan Tinggi"
L18c = c18.T.nlargest(5,[0])
L18c['Kategori'] = "Peran Kompetensi"
L18 = round(pd.concat([L18a, L18b, L18c]),2)
L18['Tahun'] = "2018"

L = pd.concat([L22,L21,L20,L19,L18])
L
L.to_excel("/content/drive/MyDrive/Tracer Study/{}/TertinggiKA.xlsx".format(prodi, year))

"""**LOWEST TREND VALUE**"""

# Lowest
S22a = a22.T.nsmallest(5,[0])
S22a['Kategori'] = "Penguasaan Kompetensi"
S22b = b22.T.nsmallest(5,[0])
S22b['Kategori'] = "Kontribusi Perguruan Tinggi"
S22c = c22.T.nsmallest(5,[0])
S22c['Kategori'] = "Peran Kompetensi"
S22 = pd.concat([S22a, S22b, S22c])
S22['Tahun'] = "2022"

S21a = a21.T.nsmallest(5,[0])
S21a['Kategori'] = "Penguasaan Kompetensi"
S21b = b21.T.nsmallest(5,[0])
S21b['Kategori'] = "Kontribusi Perguruan Tinggi"
S21c = c21.T.nsmallest(5,[0])
S21c['Kategori'] = "Peran Kompetensi"
S21 = pd.concat([S21a, S21b, S21c])
S21['Tahun'] = "2021"

S20a = a20.T.nsmallest(5,[0])
S20a['Kategori'] = "Penguasaan Kompetensi"
S20b = b20.T.nsmallest(5,[0])
S20b['Kategori'] = "Kontribusi Perguruan Tinggi"
S20c = c20.T.nsmallest(5,[0])
S20c['Kategori'] = "Peran Kompetensi"
S20 = pd.concat([S20a, S20b, S20c])
S20['Tahun'] = "2020"

S19a = a19.T.nsmallest(5,[0])
S19a['Kategori'] = "Penguasaan Kompetensi"
S19b = b19.T.nsmallest(5,[0])
S19b['Kategori'] = "Kontribusi Perguruan Tinggi"
S19c = c19.T.nsmallest(5,[0])
S19c['Kategori'] = "Peran Kompetensi"
S19 = pd.concat([S19a, S19b, S19c])
S19['Tahun'] = "2019"

S18a = a18.T.nsmallest(5,[0])
S18a['Kategori'] = "Penguasaan Kompetensi"
S18b = b18.T.nsmallest(5,[0])
S18b['Kategori'] = "Kontribusi Perguruan Tinggi"
S18c = c18.T.nsmallest(5,[0])
S18c['Kategori'] = "Peran Kompetensi"
S18 = pd.concat([S18a, S18b, S18c])
S18['Tahun'] = "2018"

S = round(pd.concat([S22,S21,S20,S19,S18]),2)
S
S.to_excel("/content/drive/MyDrive/Tracer Study/{}/TerendahKA.xlsx".format(prodi, year))

l22=sh5.loc[sh5['Program Studi'] == prodi].iloc[:, 8:31]
l21=sh4.loc[sh4['Program Studi'] == prodi].iloc[:, 8:31]
l20=sh3.loc[sh3['Program Studi'] == prodi].iloc[:, 7:30]
l19=sh2.loc[sh2['Program Studi'] == prodi].iloc[:, 7:30]
l18=sh1.loc[sh1['Program Studi'] == prodi].iloc[:, 6:29]

N_data = pd.DataFrame({'Tahun': ['2018','2019','2020','2021','2022'],
                      'N': [len(l18),len(l19),len(l20),len(l21),len(l22)]})
N_data

"""# **TREN - PENGUASAAN KOMPETENSI**"""

dfs = [a22, a21, a20]
columns = ['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu']

extracted_data = []
for df in dfs:
    extracted_data.append(df.loc[0, columns])

result_df = pd.concat(extracted_data, axis=1)

dfs2 = [a19]
columns = ['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','menggunakan teknik, keahlian, dan/atau alat-alat modern dalam pekerjaan/kehidupan sehari-hari','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu']

extracted_data2 = []
for df in dfs2:
    extracted_data2.append(df.loc[0, columns])

result_df2 = pd.concat(extracted_data2, axis=1)

dfs3 = [a18]
columns = ['etika','kemampuan belajar','bekerja tim','keterampilan teknologi informasi dan komunikasi','keterampilan teknologi informasi dan komunikasi','berkomunikasi menggunakan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu']

extracted_data3 = []
for df in dfs3:
    extracted_data3.append(df.loc[0, columns])

result_df3 = pd.concat(extracted_data3, axis=1)
result_df2 = result_df2.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result_df3 = result_df3.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result = pd.DataFrame()
result['2022'] = result_df.iloc[:,0]
result['2021'] = result_df.iloc[:,1]
result['2020'] = result_df.iloc[:,2]
result['2019'] = result_df2.iloc[:,0]
result['2018'] = result_df3.iloc[:,0]

result = result.T

fig1 = go.Figure()

fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[0,:]) + [result.iloc[0, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2022',
      line=dict(color='rgba(193,4,4,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[1,:]) + [result.iloc[1, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2021',
      line=dict(color='rgba(128,100,162,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[2,:]) + [result.iloc[2, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2020',
      line=dict(color='rgba(3,176,82,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[3,:]) + [result.iloc[3, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2019',
      line=dict(color='rgba(247,150,69,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[4,:]) + [result.iloc[4, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2018',
      line=dict(color='rgba(65,112,192,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))

fig1.update_layout(
  polar=dict(
    radialaxis=dict(
      visible=True,
      tickfont=dict(size=28),
      range=[0, 5],
      gridcolor='rgba(0,0,0,0.3)',
      tickvals=[0, 1, 2, 3, 4, 5],
      ticktext=[0, 1, 2, 3, 4, 5],
      tickmode='array',
      tickformat=',d'
    ),
    angularaxis=dict(
      tickfont=dict(size=28),
      thetaunit="degrees",
      rotation=90,
      direction='counterclockwise',
      gridcolor='darkblue'
    )
  ),
  showlegend=True,
  legend=dict(
        font=dict(size=23),
        orientation='h',
        x=0.37,
        y=1.1,
        traceorder='reversed',
        bgcolor='rgba(0,0,0,0)'
  ),
  #title="Penguasaan Kompetensi",
  #title_font=dict(size=36),
  #title_x=0.5,
  #title_y=1
)

fig1.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Tren_PenguasaanKompetensi.png".format(prodi)
pio.write_image(fig1, dir, width=2000, height=1100)

"""# **TREN - KONTRIBUSI PERGURUAN TINGGI**"""

dfs = [b22, b21, b20]
columns = ['etika dan tanggung jawab keprofesian.1','kemampuan belajar sepanjang hayat.1','bekerja tim.1','kemampuan berkomunikasi.1','kemampuan menggunakan teknologi informasi.1','kemampuan bahasa asing.1','pengetahuan dan penerapan bidang/disiplin ilmu.1']

extracted_data = []
for df in dfs:
    extracted_data.append(df.loc[0, columns])

result_df = pd.concat(extracted_data, axis=1)

dfs2 = [b19]
columns = ['etika dan tanggung jawab keprofesian.1','kemampuan belajar sepanjang hayat.1','bekerja tim.1','kemampuan berkomunikasi.1','menggunakan teknik, keahlian, dan/atau alat-alat modern dalam pekerjaan/kehidupan sehari-hari.1','kemampuan bahasa asing.1','pengetahuan dan penerapan bidang/disiplin ilmu.1']

extracted_data2 = []
for df in dfs2:
    extracted_data2.append(df.loc[0, columns])

result_df2 = pd.concat(extracted_data2, axis=1)

dfs3 = [b18]
columns = ['etika.1','kemampuan belajar.1','bekerja tim.1','keterampilan teknologi informasi dan komunikasi.1','keterampilan teknologi informasi dan komunikasi.1','berkomunikasi menggunakan bahasa asing.1','pengetahuan dan penerapan bidang/disiplin ilmu.1']

extracted_data3 = []
for df in dfs3:
    extracted_data3.append(df.loc[0, columns])

result_df3 = pd.concat(extracted_data3, axis=1)
result_df = result_df.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result_df2 = result_df2.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result_df3 = result_df3.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result = pd.DataFrame()
result['2022'] = result_df.iloc[:,0]
result['2021'] = result_df.iloc[:,1]
result['2020'] = result_df.iloc[:,2]
result['2019'] = result_df2.iloc[:,0]
result['2018'] = result_df3.iloc[:,0]

result = result.T

fig1 = go.Figure()

fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[0,:]) + [result.iloc[0, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2022',
      line=dict(color='rgba(193,4,4,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[1,:]) + [result.iloc[1, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2021',
      line=dict(color='rgba(128,100,162,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[2,:]) + [result.iloc[2, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2020',
      line=dict(color='rgba(3,176,82,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[3,:]) + [result.iloc[3, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2019',
      line=dict(color='rgba(247,150,69,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[4,:]) + [result.iloc[4, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2018',
      line=dict(color='rgba(65,112,192,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))


fig1.update_layout(
  polar=dict(
    radialaxis=dict(
      visible=True,
      tickfont=dict(size=28),
      range=[0, 5],
      gridcolor='rgba(0,0,0,0.3)',
      tickvals=[0, 1, 2, 3, 4, 5],
      ticktext=[0, 1, 2, 3, 4, 5],
      tickmode='array',
      tickformat=',d'
    ),
    angularaxis=dict(
      tickfont=dict(size=28),
      thetaunit="degrees",
      rotation=90,
      direction='counterclockwise',
      gridcolor='darkblue'
    )
  ),
  showlegend=True,
  legend=dict(
        font=dict(size=23),
        orientation='h',
        x=0.37,
        y=1.1,
        traceorder='reversed',
        bgcolor='rgba(0,0,0,0)'
  ),
  #title="Kontribusi Perguruan Tinggi",
  #title_font=dict(size=36),
  #title_x=0.5,
  #title_y=1
)

fig1.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Tren_KontribusiPerguruanTinggi.png".format(prodi)
pio.write_image(fig1, dir, width=2000, height=1100)

"""# **TREN - PERAN KOMPETENSI**"""

dfs = [c22, c21, c20]
columns = ['etika dan tanggung jawab keprofesian.2','kemampuan belajar sepanjang hayat.2','bekerja tim.2','kemampuan berkomunikasi.2','kemampuan menggunakan teknologi informasi.2','kemampuan bahasa asing.2','pengetahuan dan penerapan bidang/disiplin ilmu.2']

extracted_data = []
for df in dfs:
    extracted_data.append(df.loc[0, columns])

result_df = pd.concat(extracted_data, axis=1)

dfs2 = [c19]
columns = ['etika dan tanggung jawab keprofesian.2','kemampuan belajar sepanjang hayat.2','bekerja tim.2','kemampuan berkomunikasi.2','menggunakan teknik, keahlian, dan/atau alat-alat modern dalam pekerjaan/kehidupan sehari-hari.2','kemampuan bahasa asing.2','pengetahuan dan penerapan bidang/disiplin ilmu.2']

extracted_data2 = []
for df in dfs2:
    extracted_data2.append(df.loc[0, columns])

result_df2 = pd.concat(extracted_data2, axis=1)

dfs3 = [c18]
columns = ['etika.2','kemampuan belajar.2','bekerja tim.2','keterampilan teknologi informasi dan komunikasi.2','keterampilan teknologi informasi dan komunikasi.2','berkomunikasi menggunakan bahasa asing.2','pengetahuan dan penerapan bidang/disiplin ilmu.2']

extracted_data3 = []
for df in dfs3:
    extracted_data3.append(df.loc[0, columns])

result_df3 = pd.concat(extracted_data3, axis=1)
result_df = result_df.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result_df2 = result_df2.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result_df3 = result_df3.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result = pd.DataFrame()
result['2022'] = result_df.iloc[:,0]
result['2021'] = result_df.iloc[:,1]
result['2020'] = result_df.iloc[:,2]
result['2019'] = result_df2.iloc[:,0]
result['2018'] = result_df3.iloc[:,0]

result = result.T

fig1 = go.Figure()

fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[0,:]) + [result.iloc[0, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2022',
      line=dict(color='rgba(193,4,4,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[1,:]) + [result.iloc[1, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2021',
      line=dict(color='rgba(128,100,162,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[2,:]) + [result.iloc[2, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2020',
      line=dict(color='rgba(3,176,82,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[3,:]) + [result.iloc[3, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2019',
      line=dict(color='rgba(247,150,69,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[4,:]) + [result.iloc[4, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2018',
      line=dict(color='rgba(65,112,192,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))

fig1.update_layout(
  polar=dict(
    radialaxis=dict(
      visible=True,
      tickfont=dict(size=28),
      range=[0, 5],
      gridcolor='rgba(0,0,0,0.3)',
      tickvals=[0, 1, 2, 3, 4, 5],
      ticktext=[0, 1, 2, 3, 4, 5],
      tickmode='array',
      tickformat=',d'
    ),
    angularaxis=dict(
      tickfont=dict(size=28),
      thetaunit="degrees",
      rotation=90,
      direction='counterclockwise',
      gridcolor='darkblue'
    )
  ),
  showlegend=True,
  legend=dict(
        font=dict(size=23),
        orientation='h',
        x=0.37,
        y=1.1,
        traceorder='reversed',
        bgcolor='rgba(0,0,0,0)'
  ),
  #title="Peran Kompetensi",
  #title_font=dict(size=36),
  #title_x=0.5,
  #title_y=1
)

fig1.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Tren_PeranKompetensi.png".format(prodi)
pio.write_image(fig1, dir, width=2000, height=1100)

"""# **TINGKAT KEPENTINGAN DAN KEPUASAN USER**"""

a22=pd.DataFrame([s5[s5[:] != '-'].loc[s5['Program Studi'] == prodi].iloc[:, 6:29].mean(axis=0)])
a21=pd.DataFrame([s4[s4[:] != '-'].loc[s4['Program Studi'] == prodi].iloc[:, 6:29].mean(axis=0)])
a20=pd.DataFrame([s3[s3[:] != '-'].loc[s3['Program Studi'] == prodi].iloc[:, 6:29].mean(axis=0)])
a19=pd.DataFrame([s2[s2[:] != '-'].loc[s2['Program Studi'] == prodi].iloc[:, 7:30].mean(axis=0)])
a18=pd.DataFrame([s1[s1[:] != '-'].loc[s1['Prodi'] == prodi].iloc[:, 6:29].mean(axis=0)])

b22=pd.DataFrame([s5[s5[:] != '-'].loc[s5['Program Studi'] == prodi].iloc[:, 29:53].mean(axis=0)])
b21=pd.DataFrame([s4[s4[:] != '-'].loc[s4['Program Studi'] == prodi].iloc[:, 29:53].mean(axis=0)])
b20=pd.DataFrame([s3[s3[:] != '-'].loc[s3['Program Studi'] == prodi].iloc[:, 29:52].mean(axis=0)])
b19=pd.DataFrame([s2[s2[:] != '-'].loc[s2['Program Studi'] == prodi].iloc[:, 30:53].mean(axis=0)])
b18=pd.DataFrame([s1[s1[:] != '-'].loc[s1['Prodi'] == prodi].iloc[:, 29:52].mean(axis=0)])

years = ['22', '21', '20', '19', '18']

for year in years:
    a_df = globals()["a{}".format(year)]
    b_df = globals()["b{}".format(year)]
    
    if a_df.isnull().values.any() or b_df.isnull().values.any():
      print('2022: Not Enough No Data')
    else:
      fig = go.Figure()

      fig.add_trace(go.Scatterpolar(
            r=list(a_df.iloc[0,:]) + [a_df.iloc[0, 0], a_df.iloc[0, 0]],
            theta=list(a_df.columns) + [a_df.columns[0], a_df.columns[0]],
            name='Kepentingan',
            line=dict(color='rgba(79,129,189,255)',width=5),
            mode='lines+markers',
            marker=dict(size=11),
      ))
      fig.add_trace(go.Scatterpolar(
            r=list(b_df.iloc[0,:]) + [b_df.iloc[0, 0], b_df.iloc[0, 0]],
            theta=list(a_df.columns) + [a_df.columns[0], a_df.columns[0]],
            name='Kepuasan',
            line=dict(color='rgba(185,74,72,255)',width=5),
            mode='lines+markers',
            marker=dict(size=11),
      ))

      fig.update_layout(
      polar=dict(
          radialaxis=dict(
              visible=True,
              tickvals=[0, 1, 2, 3, 4, 5],
              ticktext=[0, 1, 2, 3, 4, 5],
              tickmode='array',
              tickformat=',d',
              tickfont=dict(size=24),
              range=[0, 5],
              gridcolor='rgba(0,0,0,0.3)'
          ),
          angularaxis=dict(
              tickfont=dict(size=26),
              rotation=90,
              direction='clockwise',
              gridcolor='darkblue'
          )
      ),
      showlegend=True,
      legend=dict(
          font=dict(size=24),
            orientation='h',
            x=0.43,
            y=1.08,
            traceorder='normal',
            bgcolor='rgba(0,0,0,0)'
      ),
      title="<b>Tahun 20{}<b>".format(year),
      title_font=dict(size=36),
      title_x=0.49,
      title_y=1.0
      )

      dir = "/content/drive/MyDrive/Tracer Study/{}/User20{}.png".format(prodi, year)  # Set filename based on year
      pio.write_image(fig, dir, width=3200, height=1200)
      fig.show()

l22=s5.loc[s5['Program Studi'] == prodi].iloc[:, 6:29]
l21=s4.loc[s4['Program Studi'] == prodi].iloc[:, 6:29]
l20=s3.loc[s3['Program Studi'] == prodi].iloc[:, 6:29]
l19=s2.loc[s2['Program Studi'] == prodi].iloc[:, 7:30]
l18=s1.loc[s1['Prodi'] == prodi].iloc[:, 6:29]

N_data = pd.DataFrame({'Tahun': ['2018','2019','2020','2021','2022'],
                      'N': [len(l18),len(l19),len(l20),len(l21),len(l22)]})
N_data

"""# **RANGKUMAN USER**"""

#Largest
L22a = a22.T.nlargest(10,[0])
L22a['Kategori'] = "Tingkat Kepentingan"
L22b = b22.T.nlargest(10,[0])
L22b['Kategori'] = "Tingkat Kepuasan"
L22 = pd.concat([L22a, L22b])
L22['Tahun'] = "2022"

L21a = a21.T.nlargest(10,[0])
L21a['Kategori'] = "Tingkat Kepentingan"
L21b = b21.T.nlargest(10,[0])
L21b['Kategori'] = "Tingkat Kepuasan"
L21 = pd.concat([L21a, L21b])
L21['Tahun'] = "2021"

L20a = a20.T.nlargest(10,[0])
L20a['Kategori'] = "Tingkat Kepentingan"
L20b = b20.T.nlargest(10,[0])
L20b['Kategori'] = "Tingkat Kepuasan"
L20 = pd.concat([L20a, L20b])
L20['Tahun'] = "2020"

L19a = a19.T.nlargest(10,[0])
L19a['Kategori'] = "Tingkat Kepentingan"
L19b = b19.T.nlargest(10,[0])
L19b['Kategori'] = "Tingkat Kepuasan"
L19 = pd.concat([L19a, L19b])
L19['Tahun'] = "2019"

L18a = a18.T.nlargest(10,[0])
L18a['Kategori'] = "Tingkat Kepentingan"
L18b = b18.T.nlargest(10,[0])
L18b['Kategori'] = "Tingkat Kepuasan"
L18 = pd.concat([L18a, L18b])
L18['Tahun'] = "2018"

L = round(pd.concat([L22,L21,L20,L19,L18]),2)
L
L.to_excel("/content/drive/MyDrive/Tracer Study/{}/TertinggiUser.xlsx".format(prodi, year))

#Smallest
L22a = a22.T.nsmallest(5,[0])
L22a['Kategori'] = "Tingkat Kepentingan"
L22b = b22.T.nsmallest(5,[0])
L22b['Kategori'] = "Tingkat Kepuasan"
L22 = pd.concat([L22a, L22b])
L22['Tahun'] = "2022"

L21a = a21.T.nsmallest(5,[0])
L21a['Kategori'] = "Tingkat Kepentingan"
L21b = b21.T.nsmallest(5,[0])
L21b['Kategori'] = "Tingkat Kepuasan"
L21 = pd.concat([L21a, L21b])
L21['Tahun'] = "2021"

L20a = a20.T.nsmallest(5,[0])
L20a['Kategori'] = "Tingkat Kepentingan"
L20b = b20.T.nsmallest(5,[0])
L20b['Kategori'] = "Tingkat Kepuasan"
L20 = pd.concat([L20a, L20b])
L20['Tahun'] = "2020"

L19a = a19.T.nsmallest(5,[0])
L19a['Kategori'] = "Tingkat Kepentingan"
L19b = b19.T.nsmallest(5,[0])
L19b['Kategori'] = "Tingkat Kepuasan"
L19 = pd.concat([L19a, L19b])
L19['Tahun'] = "2019"

L18a = a18.T.nsmallest(5,[0])
L18a['Kategori'] = "Tingkat Kepentingan"
L18b = b18.T.nsmallest(5,[0])
L18b['Kategori'] = "Tingkat Kepuasan"
L18 = pd.concat([L18a, L18b])
L18['Tahun'] = "2018"

S = round(pd.concat([L22,L21,L20,L19,L18]),2)
S
S.to_excel("/content/drive/MyDrive/Tracer Study/{}/TerendahUser.xlsx".format(prodi, year))

"""# **TREN USER - TINGKAT KEPENTINGAN**"""

dfs = [a22, a21, a20]
columns = ['Etika dan tanggung jawab keprofesian','Kemampuan belajar sepanjang hayat','Bekerja tim','Kemampuan berkomunikasi','Kemampuan menggunakan teknologi informasi','Kemampuan bahasa asing','Pengetahuan dan penerapan bidang/disiplin ilmu']

extracted_data = []
for df in dfs:
    extracted_data.append(df.loc[0, columns])

result_df = pd.concat(extracted_data, axis=1)

dfs2 = [a19]
columns = ['Etika dan tanggung jawab keprofesian','Kemampuan belajar sepanjang hayat','Bekerja tim','Kemampuan berkomunikasi','Menggunakan teknik, keahlian, dan/atau alat-alat modern dalam pekerjaan/kehidupan sehari-hari','Kemampuan bahasa asing','Pengetahuan dan penerapan bidang/disiplin ilmu']

extracted_data2 = []
for df in dfs2:
    extracted_data2.append(df.loc[0, columns])

result_df2 = pd.concat(extracted_data2, axis=1)

dfs3 = [a18]
columns = ['etika','kemampuan belajar','bekerja tim','keterampilan teknologi informasi dan komunikasi','keterampilan teknologi informasi dan komunikasi','berkomunikasi menggunakan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu']

extracted_data3 = []
for df in dfs3:
    extracted_data3.append(df.loc[0, columns])

result_df3 = pd.concat(extracted_data3, axis=1)
result_df = result_df.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result_df2 = result_df2.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result_df3 = result_df3.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result = pd.DataFrame()
result['2022'] = result_df.iloc[:,0]
result['2021'] = result_df.iloc[:,1]
result['2020'] = result_df.iloc[:,2]
result['2019'] = result_df2.iloc[:,0]
result['2018'] = result_df3.iloc[:,0]

result = result.T

fig1 = go.Figure()

fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[0,:]) + [result.iloc[0, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2022',
      line=dict(color='rgba(193,4,4,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[1,:]) + [result.iloc[1, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2021',
      line=dict(color='rgba(128,100,162,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[2,:]) + [result.iloc[2, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2020',
      line=dict(color='rgba(0,176,80,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[3,:]) + [result.iloc[3, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2019',
      line=dict(color='rgba(247,150,70,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[4,:]) + [result.iloc[4, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2018',
      line=dict(color='rgba(65,112,192,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))

fig1.update_layout(
  polar=dict(
    radialaxis=dict(
      visible=True,
      tickfont=dict(size=28),
      range=[0, 5],
      gridcolor='rgba(0,0,0,0.3)',
      tickvals=[0, 1, 2, 3, 4, 5],
      ticktext=[0, 1, 2, 3, 4, 5],
      tickmode='array',
      tickformat=',d'
    ),
    angularaxis=dict(
      tickfont=dict(size=28),
      thetaunit="degrees",
      rotation=90,
      direction='counterclockwise',
      gridcolor='darkblue'
    )
  ),
  showlegend=True,
  legend=dict(
        font=dict(size=23),
        orientation='h',
        x=0.38,
        y=1.1,
        traceorder='reversed',
        bgcolor='rgba(0,0,0,0)'
  ),
  #title="Tingkat Kepentingan",
  #title_font=dict(size=36),
  #title_x=0.5,
  #title_y=1
)

fig1.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/TrenUser_TingkatKepentingan.png".format(prodi)
pio.write_image(fig1, dir, width=2400, height=1100)

"""# **TREN USER - TINGKAT KEPUASAN**"""

dfs = [b22, b21, b20]
columns = ['Etika dan tanggung jawab keprofesian.1','Kemampuan belajar sepanjang hayat.1','Bekerja tim.1','Kemampuan berkomunikasi.1','Kemampuan menggunakan teknologi informasi.1','Kemampuan bahasa asing.1','Pengetahuan dan penerapan bidang/disiplin ilmu.1']

extracted_data = []
for df in dfs:
    extracted_data.append(df.loc[0, columns])

result_df = pd.concat(extracted_data, axis=1)

dfs2 = [b19]
columns = ['Etika dan tanggung jawab keprofesian.1','Kemampuan belajar sepanjang hayat.1','Bekerja tim.1','Kemampuan berkomunikasi.1','Menggunakan teknik, keahlian, dan/atau alat-alat modern dalam pekerjaan/kehidupan sehari-hari.1','Kemampuan bahasa asing.1','Pengetahuan dan penerapan bidang/disiplin ilmu.1']

extracted_data2 = []
for df in dfs2:
    extracted_data2.append(df.loc[0, columns])

result_df2 = pd.concat(extracted_data2, axis=1)

dfs3 = [b18]
columns = ['etika.1','kemampuan belajar.1','bekerja tim.1','keterampilan teknologi informasi dan komunikasi.1','keterampilan teknologi informasi dan komunikasi.1','berkomunikasi menggunakan bahasa asing.1','pengetahuan dan penerapan bidang/disiplin ilmu.1']

extracted_data3 = []
for df in dfs3:
    extracted_data3.append(df.loc[0, columns])

result_df3 = pd.concat(extracted_data3, axis=1)
result_df = result_df.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result_df2 = result_df2.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result_df3 = result_df3.set_index([pd.Index(['etika dan tanggung jawab keprofesian','kemampuan belajar sepanjang hayat','bekerja tim','kemampuan berkomunikasi','kemampuan menggunakan teknologi informasi','kemampuan bahasa asing','pengetahuan dan penerapan bidang/disiplin ilmu'])])
result = pd.DataFrame()
result['2022'] = result_df.iloc[:,0]
result['2021'] = result_df.iloc[:,1]
result['2020'] = result_df.iloc[:,2]
result['2019'] = result_df2.iloc[:,0]
result['2018'] = result_df3.iloc[:,0]

result = result.T

fig1 = go.Figure()

fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[0,:]) + [result.iloc[0, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2022',
      line=dict(color='rgba(193,4,4,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[1,:]) + [result.iloc[1, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2021',
      line=dict(color='rgba(128,100,162,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[2,:]) + [result.iloc[2, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2020',
      line=dict(color='rgba(3,176,82,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[3,:]) + [result.iloc[3, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2019',
      line=dict(color='rgba(247,150,69,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))
fig1.add_trace(go.Scatterpolar(
      r=list(result.iloc[4,:]) + [result.iloc[4, 0]],
      theta=list(result.columns) + [result.columns[0]],
      name='2018',
      line=dict(color='rgba(65,112,192,255)',width=5),
      mode='lines+markers',
      marker=dict(size=11),
))

fig1.update_layout(
  polar=dict(
    radialaxis=dict(
      visible=True,
      tickfont=dict(size=28),
      range=[0, 5],
      gridcolor='rgba(0,0,0,0.3)',
      tickvals=[0, 1, 2, 3, 4, 5],
      ticktext=[0, 1, 2, 3, 4, 5],
      tickmode='array',
      tickformat=',d'
    ),
    angularaxis=dict(
      tickfont=dict(size=28),
      thetaunit="degrees",
      rotation=90,
      direction='counterclockwise',
      gridcolor='darkblue'
    )
  ),
  showlegend=True,
  legend=dict(
        font=dict(size=23),
        orientation='h',
        x=0.38,
        y=1.1,
        traceorder='reversed',
        bgcolor='rgba(0,0,0,0)'
  ),
  #title="Tingkat Kepuasan",
  #title_font=dict(size=36),
  #title_x=0.5,
  #title_y=1
)

fig1.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/TrenUser_TingkatKepuasan.png".format(prodi)
pio.write_image(fig1, dir, width=2400, height=1100)

"""# **WAKTU TUNGGU - SEBELUM LULUS**"""

#bf22=sh5.loc[sh5['Program Studi'] == prodi].filter(regex = 'Kapankah Anda memperoleh pekerjaan pertama?|Berapa bulan waktu yang digunakan (sebelum kelulusan) untuk memperoleh pekerjaan pertama?', axis = 1).dropna()
#bf22 = bf22[bf22['Kapankah Anda memperoleh pekerjaan pertama?'].str.contains('Sebelum lulus')]
values=['bekerja','bekerja dan wiraswasta','Bekerja','Bekerja dan wiraswasta']

bf22=sh5.loc[sh5['Program Studi'] == prodi]
bf22=bf22[bf22['Pekerjaan utama saat ini?'].isin(values)].iloc[:, 78:80].dropna()
bf21=sh4.loc[sh4['Program Studi'] == prodi]
bf21=bf21[bf21['Pekerjaan utama saat ini?'].isin(values)].iloc[:, 78:80].dropna()
bf20=sh3.loc[sh3['Program Studi'] == prodi]
bf20=bf20[bf20['Pekerjaan utama saat ini?'].isin(values)].iloc[:, 77:79].dropna()
bf19=sh2.loc[sh2['Program Studi'] == prodi]
bf19=bf19[bf19['Pekerjaan utama saat ini?'].isin(values)].iloc[:, 77:79].dropna()
bf18=sh1.loc[sh1['Program Studi'] == prodi]
bf18=bf18[bf18['Pekerjaan utama saat ini?'].isin(values)].iloc[:, 76:78].dropna()

#Count
data_list = pd.DataFrame({'Tahun':[2018,2019,2020,2021,2022],
                           'Count':[len(bf18.axes[0]),len(bf19.axes[0]),len(bf20.axes[0]),len(bf21.axes[0]),len(bf22.axes[0])]})

#Minimum
data_list['Min'] = [bf18.iloc[:,1].min(axis=0),bf19.iloc[:,1].min(axis=0),bf20.iloc[:,1].min(axis=0),bf21.iloc[:,1].min(axis=0),bf22.iloc[:,1].min(axis=0)]

#Maximum
data_list['Max'] = [bf18.iloc[:,1].max(axis=0),bf19.iloc[:,1].max(axis=0),bf20.iloc[:,1].max(axis=0),bf21.iloc[:,1].max(axis=0),bf22.iloc[:,1].max(axis=0)]

#Mean
data_list['Mean'] = [bf18.iloc[:,1].mean(axis=0),bf19.iloc[:,1].mean(axis=0),bf20.iloc[:,1].mean(axis=0),bf21.iloc[:,1].mean(axis=0),bf22.iloc[:,1].mean(axis=0)]

#Quartile
data_list['Q1'] = [np.percentile(bf18.iloc[:,1], 25),np.percentile(bf19.iloc[:,1], 25),np.percentile(bf20.iloc[:,1], 25),np.percentile(bf21.iloc[:,1], 25),np.percentile(bf22.iloc[:,1], 25)]
data_list['Median'] = [np.percentile(bf18.iloc[:,1], 50),np.percentile(bf19.iloc[:,1], 50),np.percentile(bf20.iloc[:,1], 50),np.percentile(bf21.iloc[:,1], 50),np.percentile(bf22.iloc[:,1], 50)]
data_list['Q3'] = [np.percentile(bf18.iloc[:,1], 75),np.percentile(bf19.iloc[:,1], 75),np.percentile(bf20.iloc[:,1], 75),np.percentile(bf21.iloc[:,1], 75),np.percentile(bf22.iloc[:,1], 75)]

#Standard Deviation
data_list['Std'] = [bf18.iloc[:,1].std(),bf19.iloc[:,1].std(),bf20.iloc[:,1].std(),bf21.iloc[:,1].std(),bf22.iloc[:,1].std()]

df = data_list
years = df['Tahun']
values = df['Median']

fig = go.Figure(go.Scatter(x=years, y=values, mode='lines'))

# Add annotations
for i in range(len(years)):
    fig.add_annotation(
        x=years[i],
        y=values[i],
        text=str(values[i]),
        showarrow=True,
        arrowhead=0,
        arrowcolor='black',
        ax=0,
        ay=-20,
        font=dict(color='black',size=28),
    )


fig.update_xaxes(
    tickmode='array',
    tickvals=years,
    tickformat='d'
)

# Set chart title
fig.update_layout(
    title='Median',
    title_text='Median',
    title_font=dict(size=36),
    title_x=0.5,
    width=1600,
    height=1000
)

# Set y-axis title
fig.update_yaxes(
    title_text='Bulan',
    range=[0, max(fig.data[0].y)+1], autorange=False,
    tickmode='linear',
    dtick=0.5
)

# Set axis title font size
fig.update_layout(
    yaxis=dict(title_font=dict(size=28))
)

# Set axis tick font size
fig.update_layout(
    xaxis_tickfont=dict(size=28),  # Set X axis tick font size to 12
    yaxis_tickfont=dict(size=28)  # Set Y axis tick font size to 12
)
# Export chart as PNG image
dir = "/content/drive/MyDrive/Tracer Study/{}/WaktuTunggu_SebelumLulus.png".format(prodi)
pio.write_image(fig, dir)

fig.show()

data_list

"""# **WAKTU TUNGGU - SESUDAH LULUS**


"""

values=['bekerja','bekerja dan wiraswasta','Bekerja','Bekerja dan wiraswasta']

af22=sh5.loc[sh5['Program Studi'] == prodi]
af22=af22[af22['Pekerjaan utama saat ini?'].isin(values)].loc[:, ['Kapankah Anda memperoleh pekerjaan pertama?','Berapa bulan waktu yang digunakan (sesudah kelulusan) untuk memperoleh pekerjaan pertama?']].dropna()
af21=sh4.loc[sh4['Program Studi'] == prodi]
af21=af21[af21['Pekerjaan utama saat ini?'].isin(values)].loc[:, ['Kapankah Anda memperoleh pekerjaan pertama?','Berapa bulan waktu yang digunakan (sesudah kelulusan) untuk memperoleh pekerjaan pertama?']].dropna()
af20=sh3.loc[sh3['Program Studi'] == prodi]
af20=af20[af20['Pekerjaan utama saat ini?'].isin(values)].loc[:, ['Kapankah Anda memperoleh pekerjaan pertama?','Berapa bulan waktu yang digunakan (sesudah kelulusan) untuk memperoleh pekerjaan pertama?']].dropna()
af19=sh2.loc[sh2['Program Studi'] == prodi]
af19=af19[af19['Pekerjaan utama saat ini?'].isin(values)].loc[:, ['Kapankah Anda memperoleh pekerjaan pertama?','Berapa bulan waktu yang digunakan (sesudah kelulusan) untuk memperoleh pekerjaan pertama?']].dropna()
af18=sh1.loc[sh1['Program Studi'] == prodi]
af18=af18[af18['Pekerjaan utama saat ini?'].isin(values)].loc[:, ['Kapankah Anda memperoleh pekerjaan pertama?','Berapa bulan waktu yang digunakan (sesudah kelulusan) untuk memperoleh pekerjaan pertama?']].dropna()

#Count
data_list = pd.DataFrame({'Tahun':[2018,2019,2020,2021,2022],
                           'Count':[len(af18.axes[0]),len(af19.axes[0]),len(af20.axes[0]),len(af21.axes[0]),len(af22.axes[0])]})

#Minimum
data_list['Min'] = [af18.iloc[:,1].min(axis=0),af19.iloc[:,1].min(axis=0),af20.iloc[:,1].min(axis=0),af21.iloc[:,1].min(axis=0),af22.iloc[:,1].min(axis=0)]

#Maximum
data_list['Max'] = [af18.iloc[:,1].max(axis=0),af19.iloc[:,1].max(axis=0),af20.iloc[:,1].max(axis=0),af21.iloc[:,1].max(axis=0),af22.iloc[:,1].max(axis=0)]

#Mean
data_list['Mean'] = [af18.iloc[:,1].mean(axis=0),af19.iloc[:,1].mean(axis=0),af20.iloc[:,1].mean(axis=0),af21.iloc[:,1].mean(axis=0),af22.iloc[:,1].mean(axis=0)]

#Quartile
data_list['Q1'] = [np.percentile(af18.iloc[:,1], 25),np.percentile(af19.iloc[:,1], 25),np.percentile(af20.iloc[:,1], 25),np.percentile(af21.iloc[:,1], 25),np.percentile(af22.iloc[:,1], 25)]
data_list['Median'] = [np.percentile(af18.iloc[:,1], 50),np.percentile(af19.iloc[:,1], 50),np.percentile(af20.iloc[:,1], 50),np.percentile(af21.iloc[:,1], 50),np.percentile(af22.iloc[:,1], 50)]
data_list['Q3'] = [np.percentile(af18.iloc[:,1], 75),np.percentile(af19.iloc[:,1], 75),np.percentile(af20.iloc[:,1], 75),np.percentile(af21.iloc[:,1], 75),np.percentile(af22.iloc[:,1], 75)]

#Standard Deviation
data_list['Std'] = [bf18.iloc[:,1].std(),bf19.iloc[:,1].std(),bf20.iloc[:,1].std(),bf21.iloc[:,1].std(),bf22.iloc[:,1].std()]

df = data_list
years = df['Tahun']
values = df['Median']

fig = go.Figure(go.Scatter(x=years, y=values, mode='lines'))

# Add annotations
for i in range(len(years)):
    fig.add_annotation(
        x=years[i],  # Set the x-coordinate of the annotation
        y=values[i],  # Set the y-coordinate of the annotation
        text=str(values[i]),  # Set the text of the annotation to the value
        showarrow=True,  # Show an arrow pointing to the annotation
        arrowhead=0,  # Set the arrowhead style
        arrowcolor='black',  # Set the color of the arrow
        ax=0,  # Set the x-component of the arrow vector
        ay=-20,  # Set the y-component of the arrow vector
        font=dict(color='black',size=28)  # Set the font color of the annotation
    )


fig.update_xaxes(
    tickmode='array',  # Set the tick mode to array
    tickvals=years,  # Set the tick values to the years in the data
    tickformat='d'  # Set the tick format to display integers
)

# Set chart title
fig.update_layout(
    title='Median',
    title_text='Median',
    title_font=dict(size=36),
    title_x=0.5,
    width=1600,  # Set width in pixels
    height=1000  # Set height in pixels
)

# Set y-axis title
fig.update_yaxes(
    title_text='Bulan',
    range=[0, max(fig.data[0].y)+1], autorange=False,
    tickmode='linear',  # Set tick mode to linear
    dtick=0.5
)


# Set axis title font size
fig.update_layout(
    yaxis=dict(title_font=dict(size=28))  # Set Y axis title font size to 16
)

# Set axis tick font size
fig.update_layout(
    xaxis_tickfont=dict(size=28),  # Set X axis tick font size to 12
    yaxis_tickfont=dict(size=28)  # Set Y axis tick font size to 12
)

# Export chart as PNG image
dir = "/content/drive/MyDrive/Tracer Study/{}/WaktuTunggu_SesudahLulus.png".format(prodi)
pio.write_image(fig, dir)

fig.show()

data_list

import pandas as pd

# Create an empty dataframe to store the results
result_df = pd.DataFrame(columns=['DataFrame', 'Count <3', 'Count 3-6', 'Count >6'])

# List of dataframes
dataframes = [af18, af19, af20, af21, af22]

# Loop through each dataframe
for i, df in enumerate(dataframes, start=18):
    # Calculate counts for each category
    count_less_than_3 = (df.iloc[:, 1] < 3).sum()
    count_between_3_and_6 = ((df.iloc[:, 1] >= 3) & (df.iloc[:, 1] <= 6)).sum()
    count_greater_than_6 = (df.iloc[:, 1] > 6).sum()
    
    # Append the results to the result_df dataframe
    result_df = result_df.append({'DataFrame': f'af{i}', 
                                  'Count <3': count_less_than_3,
                                  'Count 3-6': count_between_3_and_6,
                                  'Count >6': count_greater_than_6}, 
                                  ignore_index=True)

# Print the final result_df
result_df

"""# **JENIS PERUSAHAAN**"""

p22=sh5.loc[sh5['Program Studi'] == prodi].loc[sh5['Pekerjaan utama saat ini?'].isin(['Bekerja'])].loc[:, ['Apa jenis perusahaan / instansi / institusi tempat Anda bekerja sekarang?']].dropna()
p21=sh4.loc[sh4['Program Studi'] == prodi].loc[sh4['Pekerjaan utama saat ini?'].isin(['Bekerja'])].loc[:, ['Apa jenis perusahaan / instansi / institusi tempat Anda bekerja sekarang?']].dropna()
p20=sh3.loc[sh3['Program Studi'] == prodi].loc[sh3['Pekerjaan utama saat ini?'].isin(['bekerja'])].loc[:, ['Apa jenis perusahaan / instansi / institusi tempat Anda bekerja sekarang?']].dropna()
p19=sh2.loc[sh2['Program Studi'] == prodi].loc[sh2['Pekerjaan utama saat ini?'].isin(['bekerja'])].loc[:, ['Apa jenis perusahaan / instansi / institusi tempat Anda bekerja sekarang?']].dropna()
p18=sh1.loc[sh1['Program Studi'] == prodi].loc[sh1['Pekerjaan utama saat ini?'].isin(['bekerja'])].loc[:, ['Apa jenis perusahaan / instansi / institusi tempat Anda bekerja sekarang?']].dropna()

def generate_pie_chart(df, title, prodi, file_number):
    # Calculate word occurrence count
    word_counts = df['Apa jenis perusahaan / instansi / institusi tempat Anda bekerja sekarang?'].str.split(', ')
    words = [word for word_count in word_counts for word in word_count]
    result_df = pd.Series(words).value_counts().reset_index()
    result_df.columns = ['Word', 'Count']
    result_df['Percentage'] = result_df['Count'] / result_df['Count'].sum() * 100
    print(result_df)

     # Round percentage to nearest integer
    #result_df['Percentage'] = result_df['Percentage'].round()

    # Calculate the sum of percentage values
    #sum_percentage = result_df['Percentage'].sum()

    # Adjust the last percentage value to ensure total is 100%
    #result_df['Percentage'].iloc[-1] += 100 - sum_percentage

    # Define custom color palette
    color_palette = []
    for word in result_df['Word']:
        if word == 'perusahaan swasta':
            color_palette.append('#7c609d')
        elif word == 'BUMN/BUMD':
            if file_number in ['21', '22']:
                color_palette.append('#b94a48')
            else:
                color_palette.append('#4c7eb9')
        elif word == 'wiraswasta / perusahaan sendiri':
            if file_number == '18':
                color_palette.append('#48a7c1')
            else:
                color_palette.append('#48a7c1')
        elif word == 'instansi pemerintah':
            if file_number == '18':
                color_palette.append('#4c7eb9')
            else:
                color_palette.append('#4c7eb9')
        elif word == 'organisasi non-profit / lembaga swadaya masyarakat':
            if file_number == '18':
                color_palette.append('#93b352')
            else:
                color_palette.append('#93b352')
        elif word == 'instansi pemerintah (termasuk BUMN)':
            if file_number == '18':
                color_palette.append('#4c7eb9')
            else:
                color_palette.append('#4c7eb9')

    # Create a Pie chart trace with custom colors and text format
    fig = go.Figure(data=[go.Pie(
        labels=result_df['Word'],
        values=result_df['Count'],
        text=[f"{[count]}<br>{round(percentage)}%"
              for count, percentage in zip(result_df['Count'], result_df['Percentage'])],
        textinfo='text',
        marker=dict(colors=color_palette),
    )])

    # Update chart title and axis titles
    fig.update_layout(
        #title=title,
        #title_x=0.45,
        #title_font=dict(size=45),
        width=1000,  # Set width in pixels
        height=1000,  # Set height in pixels
        showlegend=False,
        #legend=dict(font=dict(size=30))
    )
    fig.update_traces(
        textfont=dict(size=36)  # Set annotation font size to 18
    )

    # Save the chart as a PNG image to the specified directory
    file_path = f'/content/drive/MyDrive/Tracer Study/{prodi}/JenisPerusahaan{file_number}.png'
    fig.write_image(file_path)

    # Show the chart
    fig.show()

# Define the list of dataframes and corresponding years
dataframes = [p22, p21, p20, p19, p18]
years = ['2022', '2021', '2020', '2019', '2018']

# Iterate through the list of dataframes and years, and call the function for each
for i, df in enumerate(dataframes):
    year = years[i]
    file_number = years[i][2:]
    generate_pie_chart(df, f'{year}', prodi, file_number)

"""# **KATEGORI PERUSAHAAN**"""

k2022=sh5.loc[sh5['Program Studi'] == prodi].loc[sh5['Pekerjaan utama saat ini?'].isin(['Bekerja'])].loc[:, ['Apa kategori perusahaan tempat Anda bekerja?']].dropna()
k2021=sh4.loc[sh4['Program Studi'] == prodi].loc[sh4['Pekerjaan utama saat ini?'].isin(['Bekerja'])].loc[:, ['Apa kategori perusahaan tempat Anda bekerja?']].dropna()
k2020=sh3.loc[sh3['Program Studi'] == prodi].loc[sh3['Pekerjaan utama saat ini?'].isin(['bekerja'])].loc[:, ['Apa kategori perusahaan tempat Anda bekerja?']].dropna()
k2019=sh2.loc[sh2['Program Studi'] == prodi].loc[sh2['Pekerjaan utama saat ini?'].isin(['bekerja'])].loc[:, ['Apa kategori perusahaan tempat Anda bekerja?']].dropna()
k2018=sh1.loc[sh1['Program Studi'] == prodi].loc[sh1['Pekerjaan utama saat ini?'].isin(['bekerja'])].loc[:, ['Apa kategori perusahaan tempat Anda bekerja?']].dropna()

# Create a subplot with a stacked bar chart
fig = make_subplots(rows=1, cols=1, specs=[[{'type': 'bar'}]])
colors = {"Multinasional": "rgba(149,181,84,255)", "Nasional": "rgba(185,74,72,255)", "Lokal": "rgba(79,129,189,255)"}

# Define the category order
category_order = ["Multinasional", "Nasional", "Lokal"]

# Iterate through the years and dataframes
for i, (year, df) in enumerate(zip([2022, 2021, 2020, 2019, 2018], [k2022, k2021, k2020, k2019, k2018])):

    # Convert category names to capitalize for consistency
    df["Apa kategori perusahaan tempat Anda bekerja?"] = df["Apa kategori perusahaan tempat Anda bekerja?"].str.capitalize()

    # Count occurrences of each word
    counts = df["Apa kategori perusahaan tempat Anda bekerja?"].value_counts().to_frame()
    counts.columns = ["count"]

    # Calculate total count for the year
    total_count = counts["count"].sum()

    # Calculate percentage for each category
    percentages = (counts["count"] / total_count) * 100

    # Create a stacked bar trace for the year
    bar_trace = go.Bar(
        x=[percentages["Lokal"], percentages["Nasional"], percentages["Multinasional"]],
        y=[year] * 3,
        orientation='h',
        width=0.6,  # Set bar width
        marker=dict(color=[colors["Lokal"], colors["Nasional"],colors["Multinasional"]]),
        text=[f"[{counts.loc['Lokal', 'count']}]; {percentages.loc['Lokal']:.0f}%",
              f"[{counts.loc['Nasional', 'count']}]; {percentages.loc['Nasional']:.0f}%",
              f"[{counts.loc['Multinasional', 'count']}]; {percentages.loc['Multinasional']:.0f}%"]
              ,
        textposition='inside',
        name=str(year),
        legendgroup=" ".join(category_order),
        showlegend=False
    )
    fig.add_trace(bar_trace, row=1, col=1)

    # Add custom legend labels
    for category in category_order:
        fig.add_trace(go.Scatter(
            x=[None],
            y=[None],
            mode='markers',
            marker=dict(color=colors[category]),
            legendgroup=category,
            showlegend=False
        ))

# Update layout to position legend outside the plot on the right side
fig.update_layout(
    width=2400,  # Set width in pixels
    height=1400,
    xaxis=dict(
        tickvals=[],  # Empty list to remove tick marks
        ticktext=[]),
    yaxis_tickfont=dict(size=30)  # Set Y axis tick font size to 12
)

fig.update_traces(
        textfont=dict(size=30)  # Set annotation font size to 18
    )

fig.update_xaxes(showline=True, linewidth=1, linecolor='black')
fig.update_yaxes(showline=True, linewidth=1, linecolor='black')

# Show the plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/KategoriPerusahaan.png".format(prodi)
pio.write_image(fig, dir)

"""# **KATEGORI BIDANG USAHA - BEKERJA**

**Complete Data**
"""

bu22=sh5[sh5['Pekerjaan utama saat ini?'].str.contains('Bekerja|Bekerja dan wiraswasta')].loc[sh5['Program Studi'] == prodi].loc[:, ['Bidang usaha bekerja','Bidang usaha wirausaha/wiraswasta']]
bu21=sh4[sh4['Pekerjaan utama saat ini?'].str.contains('Bekerja|Bekerja dan wiraswasta')].loc[sh4['Program Studi'] == prodi].loc[:, ['Bidang usaha bekerja','Bidang usaha wirausaha/wiraswasta']]
values=['bekerja','bekerja dan wiraswasta']
bu20=sh3[sh3['Pekerjaan utama saat ini?'].isin(values)]
bu20=bu20.loc[bu20['Program Studi'] == prodi].loc[:, ['Bidang usaha bekerja','Bidang usaha wiraswasta']]
bu19=sh2[sh2['Pekerjaan utama saat ini?'].isin(values)]
bu19=bu19.loc[bu19['Program Studi'] == prodi].loc[:, ['Bidang usaha bekerja','Bidang usaha wiraswasta']]
bu18=sh1[sh1['Pekerjaan utama saat ini?'].isin(values)]
bu18=bu18.loc[bu18['Program Studi'] == prodi].loc[:, ['Bidang usaha bekerja','Bidang usaha wiraswasta']]

# Combine columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha" into a single column
bu22['Bidang usaha'] = bu22['Bidang usaha bekerja']
bu21['Bidang usaha'] = bu21['Bidang usaha bekerja']

bu20['Bidang usaha'] = bu20['Bidang usaha bekerja']
bu20.loc[bu20['Bidang usaha bekerja'] != bu20['Bidang usaha wiraswasta'], 'Bidang usaha'] = bu20['Bidang usaha wiraswasta'].fillna('') + bu20['Bidang usaha bekerja'].fillna('')

bu19['Bidang usaha'] = bu19['Bidang usaha bekerja']
bu19.loc[bu19['Bidang usaha bekerja'] != bu19['Bidang usaha wiraswasta'], 'Bidang usaha'] = bu19['Bidang usaha wiraswasta'].fillna('') + bu19['Bidang usaha bekerja'].fillna('')

bu18['Bidang usaha'] = bu18['Bidang usaha bekerja']
bu18.loc[bu18['Bidang usaha bekerja'] != bu18['Bidang usaha wiraswasta'], 'Bidang usaha'] = bu18['Bidang usaha wiraswasta'].fillna('') + bu18['Bidang usaha bekerja'].fillna('')

#bu20['Bidang usaha'] = bu20['Bidang usaha wiraswasta'].fillna('') + bu20['Bidang usaha bekerja'].fillna('')
#bu19['Bidang usaha'] = bu19['Bidang usaha wiraswasta'].fillna('') + bu19['Bidang usaha bekerja'].fillna('')
#bu18['Bidang usaha'] = bu18['Bidang usaha wiraswasta'].fillna('') + bu18['Bidang usaha bekerja'].fillna('')

# Drop original columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha"
bu22 = bu22.drop(columns=['Bidang usaha bekerja','Bidang usaha wirausaha/wiraswasta']).dropna()
bu22 = bu22[bu22['Bidang usaha'] != '']
bu21 = bu21.drop(columns=['Bidang usaha bekerja','Bidang usaha wirausaha/wiraswasta']).dropna()
bu21 = bu21[bu21['Bidang usaha'] != '']
bu20 = bu20.drop(columns=['Bidang usaha wiraswasta', 'Bidang usaha bekerja'])
bu20 = bu20[bu20['Bidang usaha'] != '']
bu19 = bu19.drop(columns=['Bidang usaha wiraswasta', 'Bidang usaha bekerja'])
bu19 = bu19[bu19['Bidang usaha'] != '']
bu18 = bu18.drop(columns=['Bidang usaha wiraswasta', 'Bidang usaha bekerja'])
bu18 = bu18[bu18['Bidang usaha'] != '']

# Concatenate dataframes for years 2022, 2021, 2020, 2019, 2018
df = pd.concat([bu22, bu21, bu20, bu19, bu18], keys=['2022', '2021', '2020', '2019', '2018'])

# Group by year and count occurrences of each alphabet
grouped = df.groupby(level=0)['Bidang usaha'].value_counts(normalize=True).unstack().fillna(0)

# Convert percentage to actual percentage
grouped *= 100

# Reset index
grouped = grouped.reset_index()

# Melt dataframe to long format
melted = pd.melt(grouped, id_vars='index', value_vars=grouped.columns[1:], var_name='Alphabet', value_name='Percentage')

# Rename columns
melted.columns = ['Year', 'Alphabet', 'Percentage']

melted['Year'] = melted['Year'].astype(int)

melted['text'] = melted['Alphabet'] + ', ' + round(melted['Percentage']).astype(str) + '%'

# Define color map
color_map = {'A': '#4f81bd', 'B': '#c0504d', 'C': '#9bbb59', 'D': '#8064a2', 'E': '#4bacc6', 'F': '#f79646',
             'G': '#2c4d75', 'H': '#772c2a', 'I': '#5f7530', 'J': '#4d3b62', 'K': '#276a7c', 'L': '#b65708',
             'M': '#729aca', 'N': '#cd7371', 'O': '#afc97a', 'P': '#9983b5', 'Q': '#6fbdd1', 'R': '#f9ab6b',
             'S': '#3a679c', 'T': '#9f3b38', 'U': '#7e9d40'}

# Create stacked bar plot with custom colors
fig = px.bar(melted, x='Year', y='Percentage', color='Alphabet', text='text',
             labels={'Year': '', 'Percentage': ''},
             width=2000, height=1600,
             color_discrete_map=color_map)  # Set custom colors using color_discrete_map parameter


# Adjust bar width
fig.update_traces(marker=dict(line=dict(width=0.5)), width=0.6) # Set custom bar width

# Adjust annotation font size
fig.update_traces(textfont=dict(size=26)) # Set custom annotation font size

fig.update_yaxes(tickvals=list(range(0, 101, 10)), 
                 ticktext=[f'{round(x)}%' for x in range(0, 101, 10)])

# Remove legend title
fig.update_layout(legend_title_text='',
                  xaxis_tickfont=dict(size=30),
                  yaxis_tickfont=dict(size=30),
                  legend=dict(font=dict(size=30))
                  )
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Bekerja_KategoriBidangUsaha_Full.png".format(prodi)
pio.write_image(fig, dir)

"""**Data <4% Removed**"""

#bu22=sh5[sh5['Pekerjaan utama saat ini?'].str.contains('Bekerja|Bekerja dan wiraswasta')].loc[sh5['Program Studi'] == prodi].loc[:, ['Bidang usaha bekerja']].dropna()
#bu21=sh4[sh4['Pekerjaan utama saat ini?'].str.contains('Bekerja|Bekerja dan wiraswasta')].loc[sh4['Program Studi'] == prodi].loc[:, ['Bidang usaha bekerja']].dropna()
#bu20=sh3.loc[sh3['Program Studi'] == prodi].loc[sh3['Pekerjaan utama saat ini?'].isin(['bekerja', 'bekerja dan wiraswasta'])].loc[:, ['Bidang usaha bekerja']].dropna()
#bu19=sh2.loc[sh2['Program Studi'] == prodi].loc[sh2['Pekerjaan utama saat ini?'].isin(['bekerja', 'bekerja dan wiraswasta'])].loc[:, ['Bidang usaha bekerja']].dropna()
#bu18=sh1.loc[sh1['Program Studi'] == prodi].loc[sh1['Pekerjaan utama saat ini?'].isin(['bekerja', 'bekerja dan wiraswasta'])].loc[:, ['Bidang usaha bekerja']].dropna()
# Concatenate dataframes for years 2022, 2021, 2020, 2019, 2018
df = pd.concat([bu22, bu21, bu20, bu19, bu18], keys=['2022', '2021', '2020', '2019', '2018'])

# Group by year and count occurrences of each alphabet
grouped = df.groupby(level=0)['Bidang usaha'].value_counts(normalize=True).unstack().fillna(0)

# Convert percentage to actual percentage
grouped *= 100

# Reset index
grouped = grouped.reset_index()

# Melt dataframe to long format
melted = pd.melt(grouped, id_vars='index', value_vars=grouped.columns[1:], var_name='Alphabet', value_name='Percentage')

# Rename columns
melted.columns = ['Year', 'Alphabet', 'Percentage']

# Convert year to int
melted['Year'] = melted['Year'].astype(int)

# Convert percentage to decimal
melted['Percentage'] /= 100

# Filter out rows with percentage < 4%
melted_filtered = melted[melted['Percentage'] >= 0.04]

# Group by year and calculate total percentage
grouped_filtered = melted_filtered.groupby('Year')['Percentage'].sum().reset_index()

# Merge filtered data with total percentage
melted_filtered = melted_filtered.merge(grouped_filtered, on='Year', suffixes=('', '_total'))

# Calculate percentage of total percentage
melted_filtered['Percentage'] /= melted_filtered['Percentage_total']

# Create custom text for annotations
melted_filtered['text'] = melted_filtered['Alphabet'] + ', ' + (melted_filtered['Percentage'] * 100).round(1).astype(str) + '%'

# Define color map
color_map = {'A': '#4f81bd', 'B': '#c0504d', 'C': '#9bbb59', 'D': '#8064a2', 'E': '#4bacc6', 'F': '#f79646',
             'G': '#2c4d75', 'H': '#772c2a', 'I': '#5f7530', 'J': '#4d3b62', 'K': '#276a7c', 'L': '#b65708',
             'M': '#729aca', 'N': '#cd7371', 'O': '#afc97a', 'P': '#9983b5', 'Q': '#6fbdd1', 'R': '#f9ab6b',
             'S': '#3a679c', 'T': '#9f3b38', 'U': '#7e9d40'}

# Create stacked bar plot
fig = px.bar(melted_filtered, x='Year', y='Percentage', color='Alphabet', text='text',
             labels={'Year': '', 'Percentage': ''}, # Remove axis titles
             width=2000, height=1500,
             color_discrete_map=color_map)

# Adjust bar width
fig.update_traces(marker=dict(line=dict(width=0.5)), width=0.6) # Set custom bar width

# Adjust annotation font size
fig.update_traces(textfont=dict(size=26)) # Set custom annotation font size

# Set y-axis scale to 0-1
fig.update_yaxes(range=[0, 1]) # Set y-axis scale to 0-1

# Remove legend title
fig.update_layout(legend_title_text='',
                  xaxis_tickfont=dict(size=30),
                  yaxis_tickfont=dict(size=30),
                  legend=dict(font=dict(size=30))
                  )
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Bekerja_KategoriBidangUsaha_Cut.png".format(prodi)
pio.write_image(fig, dir)

"""**Line Plot (Full Data)**"""

import random
import math
# Concatenate dataframes for years 2022, 2021, 2020, 2019, 2018
df = pd.concat([bu22, bu21, bu20, bu19, bu18], keys=['2022', '2021', '2020', '2019', '2018'])

# Group by year and count occurrences of each alphabet
grouped = df.groupby(level=0)['Bidang usaha'].value_counts(normalize=True).unstack().fillna(0)

# Convert percentage to actual percentage
grouped *= 100

# Reset index
grouped = grouped.reset_index()

# Melt dataframe to long format
melted = pd.melt(grouped, id_vars='index', value_vars=grouped.columns[1:], var_name='Alphabet', value_name='Percentage')

# Rename columns
melted.columns = ['Year', 'Alphabet', 'Percentage']

# Convert year to int
melted['Year'] = melted['Year'].astype(int)

# Convert percentage to decimal
#melted['Percentage'] /= 100

# Create custom text for annotations
melted['text'] = melted['Alphabet'] + ', ' + (melted['Percentage']).round().astype(str) + '%'

color_map = {'A': '#4f81bd', 'B': '#c0504d', 'C': '#9bbb59', 'D': '#8064a2', 'E': '#4bacc6', 'F': '#f79646',
             'G': '#2c4d75', 'H': '#772c2a', 'I': '#5f7530', 'J': '#4d3b62', 'K': '#276a7c', 'L': '#b65708',
             'M': '#729aca', 'N': '#cd7371', 'O': '#afc97a', 'P': '#9983b5', 'Q': '#6fbdd1', 'R': '#f9ab6b',
             'S': '#3a679c', 'T': '#9f3b38', 'U': '#7e9d40'}

# Create line chart
fig = px.line(melted, x='Year', y='Percentage', color='Alphabet', hover_name='text',
              labels={'Year': '', 'Percentage': ''}, # Remove axis titles
              width=2000, height=1500,
              color_discrete_map=color_map
              )

# Add custom annotations with arrows
for _, row in melted.iterrows():
    #radius = 40 # Random radius for circular placement
    #angle = random.uniform(0, 2*math.pi)  # Random angle for circular placement

    # Calculate the x and y coordinates on a circle
    #ax = radius * math.cos(angle)
    #ay = radius * math.sin(angle)

    fig.add_annotation(
        x=row['Year'],
        y=row['Percentage'],
        xref='x', yref='y',
        text=f"{row['Alphabet']}, {round(row['Percentage'])}%",  # Update to include only the desired custom text
        showarrow=True,
        arrowhead=1,
        arrowcolor='black',
        ax=40, ay=-40,
        #ax=ax, #ay=ay,
        font=dict(color='black',size=24)
    )



# Adjust bar width
fig.update_traces(marker=dict(line=dict(width=0.2))) # Set custom bar width

# Adjust annotation font size
#fig.update_traces(textfont=dict(size=26)) # Set custom annotation font size

# Remove legend title
fig.update_layout(legend_title_text='',
                  xaxis_tickfont=dict(size=30),
                  yaxis_tickfont=dict(size=30),
                  legend=dict(font=dict(size=30))
)
    
fig.update_xaxes(tickmode='array', tickvals=[2018, 2019, 2020, 2021, 2022])  
fig.update_yaxes(tickvals=list(range(0, 101, 10)), 
                 ticktext=[f'{round(x)}%' for x in range(0, 101, 10)])
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Bekerja_KategoriBidangUsaha_LineFull.png".format(prodi)
pio.write_image(fig, dir)

"""**Line Plot (Data <4% Removed)**"""

# Concatenate dataframes for years 2022, 2021, 2020, 2019, 2018
df = pd.concat([bu22, bu21, bu20, bu19, bu18], keys=['2022', '2021', '2020', '2019', '2018'])

# Group by year and count occurrences of each alphabet
grouped = df.groupby(level=0)['Bidang usaha'].value_counts(normalize=True).unstack().fillna(0)

# Convert percentage to actual percentage
grouped *= 100

# Reset index
grouped = grouped.reset_index()

# Melt dataframe to long format
melted = pd.melt(grouped, id_vars='index', value_vars=grouped.columns[1:], var_name='Alphabet', value_name='Percentage')

# Rename columns
melted.columns = ['Year', 'Alphabet', 'Percentage']

# Convert year to int
melted['Year'] = melted['Year'].astype(int)

# Convert percentage to decimal
melted['Percentage'] /= 100

# Filter out rows with percentage < 4%
melted_filtered = melted[melted['Percentage'] >= 0.04]

# Group by year and calculate total percentage
grouped_filtered = melted_filtered.groupby('Year')['Percentage'].sum().reset_index()

# Merge filtered data with total percentage
melted_filtered = melted_filtered.merge(grouped_filtered, on='Year', suffixes=('', '_total'))

# Calculate percentage of total percentage
melted_filtered['Percentage'] /= melted_filtered['Percentage_total']

# Create custom text for annotations
melted_filtered['text'] = melted_filtered['Alphabet'] + ', ' + (melted_filtered['Percentage'] * 100).round(1).astype(str) + '%'

color_map = {'A': '#4f81bd', 'B': '#c0504d', 'C': '#9bbb59', 'D': '#8064a2', 'E': '#4bacc6', 'F': '#f79646',
             'G': '#2c4d75', 'H': '#772c2a', 'I': '#5f7530', 'J': '#4d3b62', 'K': '#276a7c', 'L': '#b65708',
             'M': '#729aca', 'N': '#cd7371', 'O': '#afc97a', 'P': '#9983b5', 'Q': '#6fbdd1', 'R': '#f9ab6b',
             'S': '#3a679c', 'T': '#9f3b38', 'U': '#7e9d40'}

# Create line chart
fig = px.line(melted_filtered, x='Year', y='Percentage', color='Alphabet', text='text',
              labels={'Year': '', 'Percentage': ''}, # Remove axis titles
              width=2000, height=1500,
              color_discrete_map=color_map)

# Adjust bar width
fig.update_traces(marker=dict(line=dict(width=0.2))) # Set custom bar width

# Adjust annotation font size
fig.update_traces(textfont=dict(size=26)) # Set custom annotation font size

# Remove legend title
fig.update_layout(legend_title_text='',
                  xaxis_tickfont=dict(size=30),
                  yaxis_tickfont=dict(size=30),
                  legend=dict(font=dict(size=30))
)        
fig.update_xaxes(tickmode='array', tickvals=[2018, 2019, 2020, 2021, 2022])    
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Bekerja_KategoriBidangUsaha_LineCut.png".format(prodi)
pio.write_image(fig, dir)

N_data = pd.DataFrame({'Tahun': ['2018','2019','2020','2021','2022'],
                      'N': [len(bu18),len(bu19),len(bu20),len(bu21),len(bu22)]})
N_data

"""# **KATEGORI BIDANG USAHA - WIRAUSAHA**

**Complete Data**
"""

bu22=sh5[sh5['Pekerjaan utama saat ini?'].str.contains('Wirausaha')].loc[sh5['Program Studi'] == prodi].loc[:, ['Bidang usaha wirausaha/wiraswasta']]
bu21=sh4[sh4['Pekerjaan utama saat ini?'].str.contains('Wirausaha')].loc[sh4['Program Studi'] == prodi].loc[:, ['Bidang usaha wirausaha/wiraswasta']]
values=['wirausaha','bekerja dan wiraswasta']
bu20=sh3[sh3['Pekerjaan utama saat ini?'].isin(values)]
bu20=bu20.loc[bu20['Program Studi'] == prodi].loc[:, ['Bidang usaha wirausaha']]
bu19=sh2[sh2['Pekerjaan utama saat ini?'].isin(values)]
bu19=bu19.loc[bu19['Program Studi'] == prodi].loc[:, ['Bidang usaha wirausaha']]
bu18=sh1[sh1['Pekerjaan utama saat ini?'].isin(values)]
bu18=bu18.loc[bu18['Program Studi'] == prodi].loc[:, ['Bidang usaha wirausaha']]

# Combine columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha" into a single column
bu20['Bidang usaha wirausaha/wiraswasta'] = bu20['Bidang usaha wirausaha']
bu19['Bidang usaha wirausaha/wiraswasta'] = bu19['Bidang usaha wirausaha']
bu18['Bidang usaha wirausaha/wiraswasta'] = bu18['Bidang usaha wirausaha']

# Drop original columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha"
bu20 = bu20.drop(columns=['Bidang usaha wirausaha']).dropna()
bu19 = bu19.drop(columns=['Bidang usaha wirausaha']).dropna()
bu18 = bu18.drop(columns=['Bidang usaha wirausaha']).dropna()

# Concatenate dataframes for years 2022, 2021, 2020, 2019, 2018
df = pd.concat([bu22, bu21, bu20, bu19, bu18], keys=['2022', '2021', '2020', '2019', '2018'])

# Group by year and count occurrences of each alphabet
grouped = df.groupby(level=0)['Bidang usaha wirausaha/wiraswasta'].value_counts(normalize=True).unstack().fillna(0)

# Convert percentage to actual percentage
grouped *= 100

# Reset index
grouped = grouped.reset_index()

# Melt dataframe to long format
melted = pd.melt(grouped, id_vars='index', value_vars=grouped.columns[1:], var_name='Alphabet', value_name='Percentage')

# Rename columns
melted.columns = ['Year', 'Alphabet', 'Percentage']

# Convert year to int
melted['Year'] = melted['Year'].astype(int)

# Convert percentage to decimal
melted['Percentage'] /= 100

# Create custom text for annotations
melted['text'] = melted['Alphabet'] + ', ' + (melted['Percentage'] * 100).round(0).astype(str) + '%'

color_map = {'A': '#4f81bd', 'B': '#c0504d', 'C': '#9bbb59', 'D': '#8064a2', 'E': '#4bacc6', 'F': '#f79646',
             'G': '#2c4d75', 'H': '#772c2a', 'I': '#5f7530', 'J': '#4d3b62', 'K': '#276a7c', 'L': '#b65708',
             'M': '#729aca', 'N': '#cd7371', 'O': '#afc97a', 'P': '#9983b5', 'Q': '#6fbdd1', 'R': '#f9ab6b',
             'S': '#3a679c', 'T': '#9f3b38', 'U': '#7e9d40'}

# Create stacked bar plot
fig = px.bar(melted, x='Year', y='Percentage', color='Alphabet', text='text',
             labels={'Year': '', 'Percentage': ''}, # Remove axis titles
             width=2000, height=1500,
             color_discrete_map=color_map)

# Adjust bar width
fig.update_traces(marker=dict(line=dict(width=0.5)), width=0.6) # Set custom bar width

# Adjust annotation font size
fig.update_traces(textfont=dict(size=26)) # Set custom annotation font size

# Set y-axis scale to 0-1
fig.update_yaxes(range=[0, 1]) # Set y-axis scale to 0-1

# Remove legend title
fig.update_layout(legend_title_text='',
    xaxis_tickfont=dict(size=30),
    yaxis_tickfont=dict(size=30),
    legend=dict(font=dict(size=30))
    )

# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Wirausaha_KategoriBidangUsaha_Full.png".format(prodi)
pio.write_image(fig, dir)

"""**Data <4% Removed**"""

# Group by year and count occurrences of each alphabet
grouped = df.groupby(level=0)['Bidang usaha wirausaha/wiraswasta'].value_counts(normalize=True).unstack().fillna(0)

# Convert percentage to actual percentage
grouped *= 100

# Reset index
grouped = grouped.reset_index()

# Melt dataframe to long format
melted = pd.melt(grouped, id_vars='index', value_vars=grouped.columns[1:], var_name='Alphabet', value_name='Percentage')

# Rename columns
melted.columns = ['Year', 'Alphabet', 'Percentage']

# Convert year to int
melted['Year'] = melted['Year'].astype(int)

# Convert percentage to decimal
melted['Percentage'] /= 100

# Filter out rows with percentage < 4%
melted_filtered = melted[melted['Percentage'] >= 0.04]

# Group by year and calculate total percentage
grouped_filtered = melted_filtered.groupby('Year')['Percentage'].sum().reset_index()

# Merge filtered data with total percentage
melted_filtered = melted_filtered.merge(grouped_filtered, on='Year', suffixes=('', '_total'))

# Calculate percentage of total percentage
melted_filtered['Percentage'] /= melted_filtered['Percentage_total']

# Create custom text for annotations
melted_filtered['text'] = melted_filtered['Alphabet'] + ', ' + (melted_filtered['Percentage'] * 100).round(1).astype(str) + '%'

color_map = {'A': '#4f81bd', 'B': '#c0504d', 'C': '#9bbb59', 'D': '#8064a2', 'E': '#4bacc6', 'F': '#f79646',
             'G': '#2c4d75', 'H': '#772c2a', 'I': '#5f7530', 'J': '#4d3b62', 'K': '#276a7c', 'L': '#b65708',
             'M': '#729aca', 'N': '#cd7371', 'O': '#afc97a', 'P': '#9983b5', 'Q': '#6fbdd1', 'R': '#f9ab6b',
             'S': '#3a679c', 'T': '#9f3b38', 'U': '#7e9d40'}

# Create stacked bar plot
fig = px.bar(melted_filtered, x='Year', y='Percentage', color='Alphabet', text='text',
             labels={'Year': '', 'Percentage': ''}, # Remove axis titles
             width=2000, height=1500,
             color_discrete_map=color_map)

# Adjust bar width
fig.update_traces(marker=dict(line=dict(width=0.5)), width=0.6) # Set custom bar width

# Adjust annotation font size
fig.update_traces(textfont=dict(size=26)) # Set custom annotation font size

# Set y-axis scale to 0-1
fig.update_yaxes(range=[0, 1]) # Set y-axis scale to 0-1

# Remove legend title
fig.update_layout(legend_title_text='',
    xaxis_tickfont=dict(size=30),
    yaxis_tickfont=dict(size=30),
    legend=dict(font=dict(size=30))
    )
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Wirausaha_KategoriBidangUsaha_Cut.png".format(prodi)
pio.write_image(fig, dir)

N_data = pd.DataFrame({'Tahun': ['2018','2019','2020','2021','2022'],
                      'N': [len(bu18),len(bu19),len(bu20),len(bu21),len(bu22)]})
N_data

"""# **KESESUAIAN KULIAH - BEKERJA**"""

kb22=sh5[sh5['Pekerjaan utama saat ini?'].str.contains('Bekerja|Bekerja dan wiraswasta')].loc[sh5['Program Studi'] == prodi].loc[:, ['Apakah pekerjaan yang Anda lakukan di tempat bekerja sesuai dengan bidang kuliah?']]
kb21=sh4[sh4['Pekerjaan utama saat ini?'].str.contains('Bekerja|Bekerja dan wiraswasta')].loc[sh4['Program Studi'] == prodi].loc[:, ['Apakah pekerjaan yang Anda lakukan di tempat bekerja sesuai dengan bidang kuliah?']]
values=['bekerja','bekerja dan wiraswasta']
kb20=sh3[sh3['Pekerjaan utama saat ini?'].isin(values)]
kb20=kb20.loc[kb20['Program Studi'] == prodi].loc[:, ['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah?','Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah? (wiraswasta)']]
kb19=sh2[sh2['Pekerjaan utama saat ini?'].isin(values)]
kb19=kb19.loc[kb19['Program Studi'] == prodi].loc[:, ['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah?','Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah? (wiraswasta)']]
kb18=sh1[sh1['Pekerjaan utama saat ini?'].isin(values)]
kb18=kb18.loc[kb18['Program Studi'] == prodi].loc[:, ['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah?','Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah? (wiraswasta)']]

# Combine columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha" into a single column
kb20['Apakah pekerjaan yang Anda lakukan di tempat bekerja sesuai dengan bidang kuliah?'] = kb20['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah?'].fillna('') + kb20['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah? (wiraswasta)'].fillna('')
kb19['Apakah pekerjaan yang Anda lakukan di tempat bekerja sesuai dengan bidang kuliah?'] = kb19['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah?'].fillna('') + kb19['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah? (wiraswasta)'].fillna('')
kb18['Apakah pekerjaan yang Anda lakukan di tempat bekerja sesuai dengan bidang kuliah?'] = kb18['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah?'].fillna('') + kb18['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah? (wiraswasta)'].fillna('')

# Drop original columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha"
kb20 = kb20.drop(columns=['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah?','Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah? (wiraswasta)'])
kb19 = kb19.drop(columns=['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah?','Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah? (wiraswasta)'])
kb18 = kb18.drop(columns=['Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah?','Apakah pekerjaan Anda saat ini sesuai dengan bidang kuliah? (wiraswasta)'])

# Concatenate dataframes into a single dataframe
df = pd.concat([kb22, kb21, kb20, kb19, kb18], keys=[2022, 2021, 2020, 2019, 2018])

df_grouped = df.groupby(level=0).agg({'Apakah pekerjaan yang Anda lakukan di tempat bekerja sesuai dengan bidang kuliah?': ['count', 
                                                                                                                 lambda x: (x == 'ya').sum() / len(x) * 100,
                                                                                                                 lambda x: (x == 'tidak').sum() / len(x) * 100]})
# Rename columns
df_grouped.columns = ['Total', 'Percentage of ya', 'Percentage of tidak']
df_grouped['ya']=0
df_grouped['tidak']=0
for i in range(len(df_grouped)):
  df_grouped.iloc[i,3] = round(df_grouped.iloc[i,1]*df_grouped.iloc[i,0]*0.01)
  df_grouped.iloc[i,4] = round(df_grouped.iloc[i,2]*df_grouped.iloc[i,0]*0.01)

# Create a line plot using Plotly
fig = go.Figure()

# Add "ya" trace to the figure
fig.add_trace(go.Scatter(x=df_grouped.index, y=df_grouped['Percentage of ya'], mode='lines+markers',
                         name='Sesuai',
                         hovertemplate='Year: %{x}<br>Total: %{y:.2f}%<br>Count: %{text}',
                         text=df_grouped.apply(lambda x: f'[{x["Total"]}]; {x["Percentage of ya"]:.2f}%', axis=1),
                         textposition='top center',
                         showlegend=True))

# Add "tidak" trace to the figure
fig.add_trace(go.Scatter(x=df_grouped.index, y=df_grouped['Percentage of tidak'], mode='lines+markers',
                         name='Tidak Sesuai',
                         hovertemplate='Year: %{x}<br>Total: %{y:.2f}%<br>Count: %{text}',
                         text=df_grouped.apply(lambda x: f'{x["Total"]}; {x["Percentage of tidak"]:.2f}%', axis=1),
                         textposition='top center',
                         showlegend=True))

# Add annotations
for i, row in df_grouped.iterrows():
    fig.add_annotation(
        x=i,
        y=row['Percentage of ya'],
        text=f'[{int(row["ya"])}]; {row["Percentage of ya"]:.0f}%',
        showarrow=True,
        arrowhead=0,
        arrowsize=2,
        arrowcolor='rgba(0,0,0,0.7)',
        ax=0,
        ay=-20,
        font=dict(color='black',size=26)
    )
    fig.add_annotation(
        x=i,
        y=row['Percentage of tidak'],
        text=f'[{int(row["tidak"])}]; {row["Percentage of tidak"]:.0f}%',
        showarrow=True,
        arrowhead=0,
        arrowsize=2,
        arrowcolor='rgba(0,0,0,0.7)',
        ax=0,
        ay=20,
        font=dict(color='black',size=26)
    )


fig.update_xaxes(
    tickmode='array',  # Set the tick mode to array
    tickvals=years,  # Set the tick values to the years in the data
    tickformat='d'  # Set the tick format to display integers
)

fig.update_yaxes(tickvals=list(range(0, 101, 10)), 
                 ticktext=[f'{x}%' for x in range(0, 101, 10)])
# Remove legend title
fig.update_layout(
    legend_title_text='',
    width=1600,  # Set width in pixels
    height=1000,
    xaxis_tickfont=dict(size=30),
    yaxis_tickfont=dict(size=30),
    legend=dict(
        font=dict(size=30),
        orientation='h',  # Set legend orientation to horizontal
        x=0.4,  # Set x position to 0.5 (center)
        y=-0.1,  # Set y position to 1 (top)
        traceorder='normal',  # Set trace order to normal
        bgcolor='rgba(0,0,0,0)'  # Set background color to transparent
    )
)

# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Bekerja_Kesesuaian.png".format(prodi)
pio.write_image(fig, dir)

df_grouped

"""# **KESESUAIAN KULIAH - WIRAUSAHA**"""

kb22=sh5[sh5['Pekerjaan utama saat ini?'].str.contains('Wirausaha')].loc[sh5['Program Studi'] == prodi].loc[:, ['Apakah usaha Anda saat ini sesuai dengan bidang kuliah?']]
kb21=sh4[sh4['Pekerjaan utama saat ini?'].str.contains('Wirausaha')].loc[sh4['Program Studi'] == prodi].loc[:, ['Apakah usaha Anda saat ini sesuai dengan bidang kuliah?']]
values=['wirausaha']
kb20=sh3[sh3['Pekerjaan utama saat ini?'].isin(values)]
kb20=kb20.loc[kb20['Program Studi'] == prodi].loc[:, ['Apakah pekerjaan/usaha Anda saat ini sesuai dengan bidang kuliah? (wirausaha)']]
kb19=sh2[sh2['Pekerjaan utama saat ini?'].isin(values)]
kb19=kb19.loc[kb19['Program Studi'] == prodi].loc[:, ['Apakah pekerjaan/usaha Anda saat ini sesuai dengan bidang kuliah? (wirausaha)']]
kb18=sh1[sh1['Pekerjaan utama saat ini?'].isin(values)]
kb18=kb18.loc[kb18['Program Studi'] == prodi].loc[:, ['Apakah pekerjaan/usaha Anda saat ini sesuai dengan bidang kuliah? (wirausaha)']]

# Combine columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha" into a single column
kb20['Apakah usaha Anda saat ini sesuai dengan bidang kuliah?'] = kb20['Apakah pekerjaan/usaha Anda saat ini sesuai dengan bidang kuliah? (wirausaha)'].fillna('')
kb19['Apakah usaha Anda saat ini sesuai dengan bidang kuliah?'] = kb19['Apakah pekerjaan/usaha Anda saat ini sesuai dengan bidang kuliah? (wirausaha)'].fillna('')
kb18['Apakah usaha Anda saat ini sesuai dengan bidang kuliah?'] = kb18['Apakah pekerjaan/usaha Anda saat ini sesuai dengan bidang kuliah? (wirausaha)'].fillna('')

# Drop original columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha"
kb20 = kb20.drop(columns=['Apakah pekerjaan/usaha Anda saat ini sesuai dengan bidang kuliah? (wirausaha)'])
kb19 = kb19.drop(columns=['Apakah pekerjaan/usaha Anda saat ini sesuai dengan bidang kuliah? (wirausaha)'])
kb18 = kb18.drop(columns=['Apakah pekerjaan/usaha Anda saat ini sesuai dengan bidang kuliah? (wirausaha)'])

# Concatenate dataframes into a single dataframe
df = pd.concat([kb22, kb21, kb20, kb19, kb18], keys=[2022, 2021, 2020, 2019, 2018])

df_grouped = df.groupby(level=0).agg({'Apakah usaha Anda saat ini sesuai dengan bidang kuliah?': ['count', 
                                                                                                                 lambda x: (x == 'ya').sum() / len(x) * 100,
                                                                                                                 lambda x: (x == 'tidak').sum() / len(x) * 100]})
# Rename columns
df_grouped.columns = ['Total', 'Percentage of ya', 'Percentage of tidak']
df_grouped['ya']=0
df_grouped['tidak']=0
for i in range(len(df_grouped)):
  df_grouped.iloc[i,3] = round(df_grouped.iloc[i,1]*df_grouped.iloc[i,0]*0.01)
  df_grouped.iloc[i,4] = round(df_grouped.iloc[i,2]*df_grouped.iloc[i,0]*0.01)

# Create a line plot using Plotly
fig = go.Figure()

# Add "ya" trace to the figure
fig.add_trace(go.Scatter(x=df_grouped.index, y=df_grouped['Percentage of ya'], mode='lines+markers',
                         name='Sesuai',
                         hovertemplate='Year: %{x}<br>Total: %{y:.2f}%<br>Count: %{text}',
                         text=df_grouped.apply(lambda x: f'[{x["Total"]}]; {x["Percentage of ya"]:.2f}%', axis=1),
                         textposition='top center',
                         showlegend=True))

# Add "tidak" trace to the figure
fig.add_trace(go.Scatter(x=df_grouped.index, y=df_grouped['Percentage of tidak'], mode='lines+markers',
                         name='Tidak Sesuai',
                         hovertemplate='Year: %{x}<br>Total: %{y:.2f}%<br>Count: %{text}',
                         text=df_grouped.apply(lambda x: f'{x["Total"]}; {x["Percentage of tidak"]:.2f}%', axis=1),
                         textposition='top center',
                         showlegend=True))

# Add annotations
for i, row in df_grouped.iterrows():
    fig.add_annotation(
        x=i,
        y=row['Percentage of ya'],
        text=f'[{int(row["ya"])}]; {row["Percentage of ya"]:.0f}%',
        showarrow=True,
        arrowhead=0,
        arrowsize=2,
        arrowcolor='rgba(0,0,0,0.7)',
        ax=0,
        ay=-20,
        font=dict(color='black',size=26)
    )
    fig.add_annotation(
        x=i,
        y=row['Percentage of tidak'],
        text=f'[{int(row["tidak"])}]; {row["Percentage of tidak"]:.0f}%',
        showarrow=True,
        arrowhead=0,
        arrowsize=2,
        arrowcolor='rgba(0,0,0,0.7)',
        ax=0,
        ay=20,
        font=dict(color='black',size=26)
    )


fig.update_xaxes(
    tickmode='array',  # Set the tick mode to array
    tickvals=years,  # Set the tick values to the years in the data
    tickformat='d'  # Set the tick format to display integers
)

fig.update_yaxes(tickvals=list(range(0, 101, 10)), 
                 ticktext=[f'{x}%' for x in range(0, 101, 10)])
# Remove legend title
fig.update_layout(
    legend_title_text='',
    width=1600,  # Set width in pixels
    height=1000,
    xaxis_tickfont=dict(size=30),
    yaxis_tickfont=dict(size=30),
    legend=dict(
        font=dict(size=30),
        orientation='h',  # Set legend orientation to horizontal
        x=0.4,  # Set x position to 0.5 (center)
        y=-0.1,  # Set y position to 1 (top)
        traceorder='normal',  # Set trace order to normal
        bgcolor='rgba(0,0,0,0)'  # Set background color to transparent
    )
)
      
fig.update_xaxes(tickmode='array', tickvals=[2018, 2019, 2020, 2021, 2022])  
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Wirausaha_Kesesuaian.png".format(prodi)
pio.write_image(fig, dir)

df_grouped

"""# **PENGHASILAN - BEKERJA**"""

values=['bekerja','bekerja dan wiraswasta','Bekerja','Bekerja dan wiraswasta']
pb22=sh5[sh5['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb22=pb22.loc[pb22['Program Studi'] == prodi].loc[:, ['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa omset rata-rata perbulan? (dalam Rupiah)']]
pb21=sh4[sh4['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb21=pb21.loc[pb21['Program Studi'] == prodi].loc[:, ['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa omset rata-rata perbulan? (dalam Rupiah)']]
pb20=sh3[sh3['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb20=pb20.loc[pb20['Program Studi'] == prodi].loc[:, ['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah)']]
pb19=sh2[sh2['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb19=pb19.loc[pb19['Program Studi'] == prodi].loc[:, ['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah)']]
pb18=sh1[sh1['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb18=pb18.loc[pb18['Program Studi'] == prodi].loc[:, ['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah)']]

pb22['Penghasilan'] = pb22['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)'] + pb22['Berapa omset rata-rata perbulan? (dalam Rupiah)']
pb21['Penghasilan'] = pb21['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)'] + pb21['Berapa omset rata-rata perbulan? (dalam Rupiah)']
pb20['Penghasilan'] = pb20['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)'] + pb20['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah)']
pb19['Penghasilan'] = pb19['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)'] + pb19['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah)']
pb18['Penghasilan'] = pb18['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)'] + pb18['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah)']

# Drop original columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha"
pb22 = pb22[pb22['Penghasilan'] != 0].drop(columns=['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa omset rata-rata perbulan? (dalam Rupiah)'])
pb21 = pb21[pb21['Penghasilan'] != 0].drop(columns=['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa omset rata-rata perbulan? (dalam Rupiah)'])
pb20 = pb20[pb20['Penghasilan'] != 0].drop(columns=['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah)'])
pb19 = pb19[pb19['Penghasilan'] != 0].drop(columns=['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah)'])
pb18 = pb18[pb18['Penghasilan'] != 0].drop(columns=['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)','Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah)'])

# Create a list of DataFrame variable names
dataframes = ['pb22', 'pb21', 'pb20', 'pb19', 'pb18']

# Loop through the list of DataFrame variable names
for df_name in dataframes:
    # Get the DataFrame by variable name
    df = globals().get(df_name)
    
    # Check if the DataFrame is empty
    if df.empty:
        # If the DataFrame is empty, insert a row of zeros
        df = pd.DataFrame(0, index=[0], columns=df.columns)
        
        # Update the original DataFrame variable with the modified DataFrame
        globals()[df_name] = df
    
    # Check for values less than 100000 and multiply them by 1000000
    for col in df.columns:
        # Check if the column contains numeric values
        if pd.api.types.is_numeric_dtype(df[col]):
            # Multiply values less than 100000 by 1000000
            df[col] = df[col].apply(lambda x: x * 1000000 if x < 100000 else x)
            
            # Update the original DataFrame variable with the modified DataFrame
            globals()[df_name] = df

#Count
data_list = pd.DataFrame({'Tahun':[2018,2019,2020,2021,2022],
                           'Count':[len(pb18.axes[0]),len(pb19.axes[0]),len(pb20.axes[0]),len(pb21.axes[0]),len(pb22.axes[0])]})

#Minimum
data_list['Min'] = [pb18.iloc[:,0].min(axis=0),pb19.iloc[:,0].min(axis=0),pb20.iloc[:,0].min(axis=0),pb21.iloc[:,0].min(axis=0),pb22.iloc[:,0].min(axis=0)]

#Maximum
data_list['Max'] = [pb18.iloc[:,0].max(axis=0),pb19.iloc[:,0].max(axis=0),pb20.iloc[:,0].max(axis=0),pb21.iloc[:,0].max(axis=0),pb22.iloc[:,0].max(axis=0)]

#Mean
data_list['Mean'] = [pb18.iloc[:,0].mean(axis=0),pb19.iloc[:,0].mean(axis=0),pb20.iloc[:,0].mean(axis=0),pb21.iloc[:,0].mean(axis=0),pb22.iloc[:,0].mean(axis=0)]

#Quartile
data_list['Q1'] = [np.percentile(pb18.iloc[:,0], 25),np.percentile(pb19.iloc[:,0], 25),np.percentile(pb20.iloc[:,0], 25),np.percentile(pb21.iloc[:,0], 25),np.percentile(pb22.iloc[:,0], 25)]
data_list['Median'] = [np.percentile(pb18.iloc[:,0], 50),np.percentile(pb19.iloc[:,0], 50),np.percentile(pb20.iloc[:,0], 50),np.percentile(pb21.iloc[:,0], 50),np.percentile(pb22.iloc[:,0], 50)]
data_list['Q3'] = [np.percentile(pb18.iloc[:,0], 75),np.percentile(pb19.iloc[:,0], 75),np.percentile(pb20.iloc[:,0], 75),np.percentile(pb21.iloc[:,0], 75),np.percentile(pb22.iloc[:,0], 75)]

#Standard Deviation
data_list['Std'] = [pb18.iloc[:,0].std(),pb19.iloc[:,0].std(),pb20.iloc[:,0].std(),pb21.iloc[:,0].std(),pb22.iloc[:,0].std()]

df_grouped = data_list
years = df_grouped['Tahun']
df_grouped.index = ['2018','2019','2020','2021','2022']
df_grouped = df_grouped.drop(columns=['Tahun'])

# Assume your DataFrame is named 'df_grouped' with index column 'Year'
values1 = df_grouped['Median']
values2 = df_grouped['Mean']

# Create a line chart
fig = go.Figure()

# Add 'Mean' trace to the chart
fig.add_trace(go.Scatter(x=years, y=values1, mode='lines+markers', name='Median'))

# Add 'Median' trace to the chart
fig.add_trace(go.Scatter(x=years, y=values2, mode='lines+markers', name='Mean'))

for i in range(len(df_grouped)):
    fig.add_annotation(
        x=years[i],  # Set the x-coordinate of the annotation
        y=values1[i],  # Set the y-coordinate of the annotation
        text = format_currency(values1[i], 'IDR', locale='id_ID'),  # Set the text of the annotation to the value
        showarrow=True,  # Show an arrow pointing to the annotation
        arrowhead=0,  # Set the arrowhead style
        arrowcolor='black',  # Set the color of the arrow
        ax=0,  # Set the x-component of the arrow vector
        ay=-20,  # Set the y-component of the arrow vector
        font=dict(color='black',size=24)  # Set the font color of the annotation
    )
    fig.add_annotation(
        x=years[i],  # Set the x-coordinate of the annotation
        y=values2[i],  # Set the y-coordinate of the annotation
        text = format_currency(values2[i], 'IDR', locale='id_ID'),  # Set the text of the annotation to the value
        showarrow=True,  # Show an arrow pointing to the annotation
        arrowhead=0,  # Set the arrowhead style
        arrowcolor='black',  # Set the color of the arrow
        ax=0,  # Set the x-component of the arrow vector
        ay=-20,  # Set the y-component of the arrow vector
        font=dict(color='black',size=24)  # Set the font color of the annotation
    )

fig.update_xaxes(
    tickmode='array',  # Set the tick mode to array
    tickvals=years,  # Set the tick values to the years in the data
    tickformat='d'  # Set the tick format to display integers
)

# Remove legend title
fig.update_layout(legend_title_text='',
                  width=2000,  # Set width in pixels
                  height=1000,
                  xaxis_tickfont=dict(size=30),
                  yaxis_tickfont=dict(size=30),
                  yaxis_tickformat='₹,.0f',
                  legend=dict(
                  font=dict(size=30),
                  orientation='h',  # Set legend orientation to horizontal
                  x=0.4,  # Set x position to 0.5 (center)
                  y=-0.1,  # Set y position to 1 (top)
                  traceorder='normal',  # Set trace order to normal
                  bgcolor='rgba(0,0,0,0)'  # Set background color to transparent
                  ))
if max(values1) > max(values2):
  num_increments = len(values1)+5
  increment = np.round(max(values2)/ (num_increments * 1000000))*(1000000)
  custom_tickvals = np.arange(0, max(values1) + 2,increment,dtype=int)
else:
  num_increments = len(values2)+5
  increment = np.round(max(values1)/ (num_increments * 1000000))*(1000000)
  custom_tickvals = np.arange(0, max(values2) + 2,increment,dtype=int)

fig.update_yaxes(tickformat=',.0f',  # Use comma as thousands separator, no decimal places
                 ticktext=[format_currency(val, 'IDR', locale='id_ID') for val in custom_tickvals],  # Use formatted currency text as tick text
                 tickvals=custom_tickvals)  # Set custom tick values
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Penghasilan_Bekerja.png".format(prodi)
pio.write_image(fig, dir)

df_grouped.T

"""# **BONUS - BEKERJA**"""

values=['bekerja','bekerja dan wiraswasta','Bekerja','Bekerja dan wiraswasta']
pb22=sh5[sh5['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb22=pb22.loc[pb22['Program Studi'] == prodi].loc[:, ['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)']]
pb21=sh4[sh4['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb21=pb21.loc[pb21['Program Studi'] == prodi].loc[:, ['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)']]
pb20=sh3[sh3['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb20=pb20.loc[pb20['Program Studi'] == prodi].loc[:, ['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)','Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah) (wiraswasta)']]
pb19=sh2[sh2['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb19=pb19.loc[pb19['Program Studi'] == prodi].loc[:, ['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)','Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah) (wiraswasta)']]
pb18=sh1[sh1['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb18=pb18.loc[pb18['Program Studi'] == prodi].loc[:, ['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)','Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah) (wiraswasta)']]

# Combine columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha" into a single column
pb22['Bonus'] = pb22['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)']
pb21['Bonus'] = pb21['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)']
pb20['Bonus'] = pb20['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)'] + pb20['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah) (wiraswasta)']
pb19['Bonus'] = pb19['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)'] + pb19['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah) (wiraswasta)']
pb18['Bonus'] = pb18['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)'] + pb18['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah) (wiraswasta)']

# Drop original columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha"
pb22 = pb22[pb22['Bonus'] != 0].drop(columns=['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)'])
pb21 = pb21[pb21['Bonus'] != 0].drop(columns=['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)'])
pb20 = pb20[pb20['Bonus'] != 0].drop(columns=['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)','Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah) (wiraswasta)'])
pb19 = pb19[pb19['Bonus'] != 0].drop(columns=['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)','Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah) (wiraswasta)'])
pb18 = pb18[pb18['Bonus'] != 0].drop(columns=['Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah)','Berapa bonus rata-rata per tahun (Jika ada)? (dalam Rupiah) (wiraswasta)'])

# Create a list of DataFrame variable names
dataframes = ['pb22', 'pb21', 'pb20', 'pb19', 'pb18']

# Loop through the list of DataFrame variable names
for df_name in dataframes:
    # Get the DataFrame by variable name
    df = globals().get(df_name)
    
    # Check if the DataFrame is empty
    if df.empty:
        # If the DataFrame is empty, insert a row of zeros
        df = pd.DataFrame(0, index=[0], columns=df.columns)
        
        # Update the original DataFrame variable with the modified DataFrame
        globals()[df_name] = df
    
    # Check for values less than 100000 and multiply them by 1000000
    for col in df.columns:
        # Check if the column contains numeric values
        if pd.api.types.is_numeric_dtype(df[col]):
            # Multiply values less than 100000 by 1000000
            df[col] = df[col].apply(lambda x: x * 1000000 if x < 100000 else x)
            
            # Update the original DataFrame variable with the modified DataFrame
            globals()[df_name] = df

#Count
data_list = pd.DataFrame({'Tahun':[2018,2019,2020,2021,2022],
                           'Count':[len(pb18.axes[0]),len(pb19.axes[0]),len(pb20.axes[0]),len(pb21.axes[0]),len(pb22.axes[0])]})

#Minimum
data_list['Min'] = [pb18.iloc[:,0].min(axis=0),pb19.iloc[:,0].min(axis=0),pb20.iloc[:,0].min(axis=0),pb21.iloc[:,0].min(axis=0),pb22.iloc[:,0].min(axis=0)]

#Maximum
data_list['Max'] = [pb18.iloc[:,0].max(axis=0),pb19.iloc[:,0].max(axis=0),pb20.iloc[:,0].max(axis=0),pb21.iloc[:,0].max(axis=0),pb22.iloc[:,0].max(axis=0)]

#Mean
data_list['Mean'] = [pb18.iloc[:,0].mean(axis=0),pb19.iloc[:,0].mean(axis=0),pb20.iloc[:,0].mean(axis=0),pb21.iloc[:,0].mean(axis=0),pb22.iloc[:,0].mean(axis=0)]

#Quartile
data_list['Q1'] = [np.percentile(pb18.iloc[:,0], 25),np.percentile(pb19.iloc[:,0], 25),np.percentile(pb20.iloc[:,0], 25),np.percentile(pb21.iloc[:,0], 25),np.percentile(pb22.iloc[:,0], 25)]
data_list['Median'] = [np.percentile(pb18.iloc[:,0], 50),np.percentile(pb19.iloc[:,0], 50),np.percentile(pb20.iloc[:,0], 50),np.percentile(pb21.iloc[:,0], 50),np.percentile(pb22.iloc[:,0], 50)]
data_list['Q3'] = [np.percentile(pb18.iloc[:,0], 75),np.percentile(pb19.iloc[:,0], 75),np.percentile(pb20.iloc[:,0], 75),np.percentile(pb21.iloc[:,0], 75),np.percentile(pb22.iloc[:,0], 75)]

#Standard Deviation
data_list['Std'] = [pb18.iloc[:,0].std(),pb19.iloc[:,0].std(),pb20.iloc[:,0].std(),pb21.iloc[:,0].std(),pb22.iloc[:,0].std()]

df_grouped = data_list
years = df_grouped['Tahun']
df_grouped.index = ['2018','2019','2020','2021','2022']
df_grouped.drop(columns=['Tahun'])

# Assume your DataFrame is named 'df_grouped' with index column 'Year'
values1 = df_grouped['Median']
values2 = df_grouped['Mean']

# Create a line chart
fig = go.Figure()

# Add 'Mean' trace to the chart
fig.add_trace(go.Scatter(x=years, y=values1, mode='lines+markers', name='Median'))

# Add 'Median' trace to the chart
fig.add_trace(go.Scatter(x=years, y=values2, mode='lines+markers', name='Mean'))

for i in range(len(df_grouped)):
    fig.add_annotation(
        x=years[i],  # Set the x-coordinate of the annotation
        y=values1[i],  # Set the y-coordinate of the annotation
        text = format_currency(values1[i], 'IDR', locale='id_ID'),  # Set the text of the annotation to the value
        showarrow=True,  # Show an arrow pointing to the annotation
        arrowhead=0,  # Set the arrowhead style
        arrowcolor='black',  # Set the color of the arrow
        ax=0,  # Set the x-component of the arrow vector
        ay=-20,  # Set the y-component of the arrow vector
        font=dict(color='black',size=24)  # Set the font color of the annotation
    )
    fig.add_annotation(
        x=years[i],  # Set the x-coordinate of the annotation
        y=values2[i],  # Set the y-coordinate of the annotation
        text = format_currency(values2[i], 'IDR', locale='id_ID'),  # Set the text of the annotation to the value
        showarrow=True,  # Show an arrow pointing to the annotation
        arrowhead=0,  # Set the arrowhead style
        arrowcolor='black',  # Set the color of the arrow
        ax=0,  # Set the x-component of the arrow vector
        ay=-20,  # Set the y-component of the arrow vector
        font=dict(color='black',size=24)  # Set the font color of the annotation
    )

fig.update_xaxes(
    tickmode='array',  # Set the tick mode to array
    tickvals=years,  # Set the tick values to the years in the data
    tickformat='d'  # Set the tick format to display integers
)

# Remove legend title
fig.update_layout(legend_title_text='',
                  width=2000,  # Set width in pixels
                  height=1000,
                  xaxis_tickfont=dict(size=30),
                  yaxis_tickfont=dict(size=30),
                  yaxis_tickformat='₹,.0f',
                  legend=dict(
                  font=dict(size=30),
                  orientation='h',  # Set legend orientation to horizontal
                  x=0.4,  # Set x position to 0.5 (center)
                  y=-0.1,  # Set y position to 1 (top)
                  traceorder='normal',  # Set trace order to normal
                  bgcolor='rgba(0,0,0,0)'  # Set background color to transparent
                  ))

if max(values1) > max(values2):
  num_increments = len(values1)+5
  increment = np.round(max(values2)/ (num_increments * 1000000))*(1000000)
  custom_tickvals = np.arange(0, max(values1) + 2,increment,dtype=int)
else:
  num_increments = len(values2)+5
  increment = np.round(max(values1)/ (num_increments * 1000000))*(1000000)
  custom_tickvals = np.arange(0, max(values2) + 2,increment,dtype=int)

fig.update_yaxes(tickformat=',.0f',  # Use comma as thousands separator, no decimal places
                 ticktext=[format_currency(val, 'IDR', locale='id_ID') for val in custom_tickvals],  # Use formatted currency text as tick text
                 tickvals=custom_tickvals)  # Set custom tick values
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Bonus_Bekerja.png".format(prodi)
pio.write_image(fig, dir)

df_grouped.T

"""# **PENGHASILAN - WIRAUSAHA**"""

values=['wirausaha','Wirausaha']
pb22=sh5[sh5['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb22=pb22.loc[pb22['Program Studi'] == prodi].loc[:, ['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)']]
pb21=sh4[sh4['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb21=pb21.loc[pb21['Program Studi'] == prodi].loc[:, ['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)']]
pb20=sh3[sh3['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb20=pb20.loc[pb20['Program Studi'] == prodi].loc[:, ['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah) (wirausaha)']]
pb19=sh2[sh2['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb19=pb19.loc[pb19['Program Studi'] == prodi].loc[:, ['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah) (wirausaha)']]
pb18=sh1[sh1['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb18=pb18.loc[pb18['Program Studi'] == prodi].loc[:, ['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah) (wirausaha)']]

# Combine columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha" into a single column
pb22['Penghasilan'] = pb22['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)']
pb21['Penghasilan'] = pb21['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)']
pb20['Penghasilan'] = pb20['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah) (wirausaha)']
pb19['Penghasilan'] = pb19['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah) (wirausaha)']
pb18['Penghasilan'] = pb18['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah) (wirausaha)']

# Drop original columns "Bidang usaha wiraswasta" and "Bidang usaha wirausaha"
pb22 = pb22[pb22['Penghasilan'] != 0].drop(columns=['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)'])
pb21 = pb21[pb21['Penghasilan'] != 0].drop(columns=['Berapa gaji per bulan saat ini di luar bonus? (dalam Rupiah)'])
pb20 = pb20[pb20['Penghasilan'] != 0].drop(columns=['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah) (wirausaha)'])
pb19 = pb19[pb19['Penghasilan'] != 0].drop(columns=['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah) (wirausaha)'])
pb18 = pb18[pb18['Penghasilan'] != 0].drop(columns=['Berapa rata-rata penghasilan per bulan saat ini di luar bonus? (dalam Rupiah) (wirausaha)'])

# Create a list of DataFrame variable names
dataframes = ['pb22', 'pb21', 'pb20', 'pb19', 'pb18']

# Loop through the list of DataFrame variable names
for df_name in dataframes:
    # Get the DataFrame by variable name
    df = globals().get(df_name)
    
    # Check if the DataFrame is empty
    if df.empty:
        # If the DataFrame is empty, insert a row of zeros
        df = pd.DataFrame(0, index=[0], columns=df.columns)
        
        # Update the original DataFrame variable with the modified DataFrame
        globals()[df_name] = df
    
    # Check for values less than 100000 and multiply them by 1000000
    for col in df.columns:
        # Check if the column contains numeric values
        if pd.api.types.is_numeric_dtype(df[col]):
            # Multiply values less than 100000 by 1000000
            df[col] = df[col].apply(lambda x: x * 1000000 if x < 100000 else x)
            
            # Update the original DataFrame variable with the modified DataFrame
            globals()[df_name] = df

#Count
data_list = pd.DataFrame({'Tahun':[2018,2019,2020,2021,2022],
                           'Count':[len(pb18.axes[0]),len(pb19.axes[0]),len(pb20.axes[0]),len(pb21.axes[0]),len(pb22.axes[0])]})

#Minimum
data_list['Min'] = [pb18.iloc[:,0].min(axis=0),pb19.iloc[:,0].min(axis=0),pb20.iloc[:,0].min(axis=0),pb21.iloc[:,0].min(axis=0),pb22.iloc[:,0].min(axis=0)]

#Maximum
data_list['Max'] = [pb18.iloc[:,0].max(axis=0),pb19.iloc[:,0].max(axis=0),pb20.iloc[:,0].max(axis=0),pb21.iloc[:,0].max(axis=0),pb22.iloc[:,0].max(axis=0)]

#Mean
data_list['Mean'] = [pb18.iloc[:,0].mean(axis=0),pb19.iloc[:,0].mean(axis=0),pb20.iloc[:,0].mean(axis=0),pb21.iloc[:,0].mean(axis=0),pb22.iloc[:,0].mean(axis=0)]

#Quartile
data_list['Q1'] = [np.percentile(pb18.iloc[:,0], 25),np.percentile(pb19.iloc[:,0], 25),np.percentile(pb20.iloc[:,0], 25),np.percentile(pb21.iloc[:,0], 25),np.percentile(pb22.iloc[:,0], 25)]
data_list['Median'] = [np.percentile(pb18.iloc[:,0], 50),np.percentile(pb19.iloc[:,0], 50),np.percentile(pb20.iloc[:,0], 50),np.percentile(pb21.iloc[:,0], 50),np.percentile(pb22.iloc[:,0], 50)]
data_list['Q3'] = [np.percentile(pb18.iloc[:,0], 75),np.percentile(pb19.iloc[:,0], 75),np.percentile(pb20.iloc[:,0], 75),np.percentile(pb21.iloc[:,0], 75),np.percentile(pb22.iloc[:,0], 75)]

#Standard Deviation
data_list['Std'] = [pb18.iloc[:,0].std(),pb19.iloc[:,0].std(),pb20.iloc[:,0].std(),pb21.iloc[:,0].std(),pb22.iloc[:,0].std()]

df_grouped = data_list
years = df_grouped['Tahun']
df_grouped.index = ['2018','2019','2020','2021','2022']
df_grouped.drop(columns=['Tahun'])

# Assume your DataFrame is named 'df_grouped' with index column 'Year'
values1 = df_grouped['Median']
values2 = df_grouped['Mean']

# Create a line chart
fig = go.Figure()

# Add 'Mean' trace to the chart
fig.add_trace(go.Scatter(x=years, y=values1, mode='lines+markers', name='Median'))

# Add 'Median' trace to the chart
fig.add_trace(go.Scatter(x=years, y=values2, mode='lines+markers', name='Mean'))

for i in range(len(df_grouped)):
    fig.add_annotation(
        x=years[i],  # Set the x-coordinate of the annotation
        y=values1[i],  # Set the y-coordinate of the annotation
        text = format_currency(values1[i], 'IDR', locale='id_ID'),  # Set the text of the annotation to the value
        showarrow=True,  # Show an arrow pointing to the annotation
        arrowhead=0,  # Set the arrowhead style
        arrowcolor='black',  # Set the color of the arrow
        ax=0,  # Set the x-component of the arrow vector
        ay=-10,  # Set the y-component of the arrow vector
        font=dict(color='black',size=21)  # Set the font color of the annotation
    )
    fig.add_annotation(
        x=years[i],  # Set the x-coordinate of the annotation
        y=values2[i],  # Set the y-coordinate of the annotation
        text = format_currency(values2[i], 'IDR', locale='id_ID'),  # Set the text of the annotation to the value
        showarrow=True,  # Show an arrow pointing to the annotation
        arrowhead=0,  # Set the arrowhead style
        arrowcolor='black',  # Set the color of the arrow
        ax=0,  # Set the x-component of the arrow vector
        ay=-10,  # Set the y-component of the arrow vector
        font=dict(color='black',size=21)  # Set the font color of the annotation
    )

fig.update_xaxes(
    tickmode='array',  # Set the tick mode to array
    tickvals=years,  # Set the tick values to the years in the data
    tickformat='d'  # Set the tick format to display integers
)

# Remove legend title
fig.update_layout(legend_title_text='',
                  width=2000,  # Set width in pixels
                  height=1000,
                  xaxis_tickfont=dict(size=30),
                  yaxis_tickfont=dict(size=30),
                  yaxis_tickformat='₹,.0f',
                  legend=dict(
                  font=dict(size=30),
                  orientation='h',  # Set legend orientation to horizontal
                  x=0.4,  # Set x position to 0.5 (center)
                  y=-0.1,  # Set y position to 1 (top)
                  traceorder='normal',  # Set trace order to normal
                  bgcolor='rgba(0,0,0,0)'  # Set background color to transparent
                  ))
if max(values1) > max(values2):
  num_increments = len(values1)
  increment = np.round(max(values1)/ (num_increments * 1000000))*(1000000)
  custom_tickvals = np.arange(0, max(values1) + 2,increment,dtype=int)
else:
  num_increments = len(values2)
  increment = np.round(max(values2)/ (num_increments * 1000000))*(1000000)
  custom_tickvals = np.arange(0, max(values2) + 2,increment,dtype=int)

fig.update_yaxes(tickformat=',.0f',  # Use comma as thousands separator, no decimal places
                 ticktext=[format_currency(val, 'IDR', locale='id_ID') for val in custom_tickvals],  # Use formatted currency text as tick text
                 tickvals=custom_tickvals)  # Set custom tick values
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Penghasilan_Wirausaha.png".format(prodi)
pio.write_image(fig, dir)

df_grouped.T

"""# **OMSET - WIRAUSAHA**"""

values=['wirausaha','Wirausaha']
pb22=sh5[sh5['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb22=pb22.loc[pb22['Program Studi'] == prodi].loc[:, ['Berapa omset rata-rata perbulan? (dalam Rupiah)']]
pb21=sh4[sh4['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb21=pb21.loc[pb21['Program Studi'] == prodi].loc[:, ['Berapa omset rata-rata perbulan? (dalam Rupiah)']]
pb20=sh3[sh3['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb20=pb20.loc[pb20['Program Studi'] == prodi].loc[:, ['Berapa omset rata-rata perbulan? (dalam Rupiah)']]
pb19=sh2[sh2['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb19=pb19.loc[pb19['Program Studi'] == prodi].loc[:, ['Berapa omset rata-rata perbulan? (dalam Rupiah)']]
pb18=sh1[sh1['Pekerjaan utama saat ini?'].isin(values)].fillna(0)
pb18=pb18.loc[pb18['Program Studi'] == prodi].loc[:, ['Berapa omset rata-rata perbulan? (dalam Rupiah)']]

pb22['Omset'] = pb22['Berapa omset rata-rata perbulan? (dalam Rupiah)']
pb21['Omset'] = pb21['Berapa omset rata-rata perbulan? (dalam Rupiah)']
pb20['Omset'] = pb20['Berapa omset rata-rata perbulan? (dalam Rupiah)']
pb19['Omset'] = pb19['Berapa omset rata-rata perbulan? (dalam Rupiah)']
pb18['Omset'] = pb18['Berapa omset rata-rata perbulan? (dalam Rupiah)']

pb22 = pb22.drop(columns=['Berapa omset rata-rata perbulan? (dalam Rupiah)']) #.loc[(pb22 != 0).all(axis=1)]
pb21 = pb21.drop(columns=['Berapa omset rata-rata perbulan? (dalam Rupiah)']) #.loc[(pb21 != 0).all(axis=1)]
pb20 = pb20.drop(columns=['Berapa omset rata-rata perbulan? (dalam Rupiah)']) #.loc[(pb20 != 0).all(axis=1)]
pb19 = pb19.drop(columns=['Berapa omset rata-rata perbulan? (dalam Rupiah)']) #.loc[(pb19 != 0).all(axis=1)]
pb18 = pb18.drop(columns=['Berapa omset rata-rata perbulan? (dalam Rupiah)']) #.loc[(pb18 != 0).all(axis=1)]

pb22 = pb22.loc[(pb22 != 0).all(axis=1)]
pb21 = pb21.loc[(pb21 != 0).all(axis=1)]
pb20 = pb20.loc[(pb20 != 0).all(axis=1)]
pb19 = pb19.loc[(pb19 != 0).all(axis=1)]
pb18 = pb18.loc[(pb18 != 0).all(axis=1)]

# Create a list of DataFrame variable names
dataframes = ['pb22', 'pb21', 'pb20', 'pb19', 'pb18']

# Loop through the list of DataFrame variable names
for df_name in dataframes:
    # Get the DataFrame by variable name
    df = globals().get(df_name)
    
    # Check if the DataFrame is empty
    if df.empty:
        # If the DataFrame is empty, insert a row of zeros
        df = pd.DataFrame(0, index=[0], columns=df.columns)
        
        # Update the original DataFrame variable with the modified DataFrame
        globals()[df_name] = df
    
    # Check for values less than 100000 and multiply them by 1000000
    for col in df.columns:
        # Check if the column contains numeric values
        if pd.api.types.is_numeric_dtype(df[col]):
            # Multiply values less than 100000 by 1000000
            df[col] = df[col].apply(lambda x: x * 1000000 if x < 100000 else x)
            
            # Update the original DataFrame variable with the modified DataFrame
            globals()[df_name] = df
#Count
data_list = pd.DataFrame({'Tahun':[2018,2019,2020,2021,2022],
                           'Count':[len(pb18.axes[0]),len(pb19.axes[0]),len(pb20.axes[0]),len(pb21.axes[0]),len(pb22.axes[0])]})

#Minimum
data_list['Min'] = [pb18.iloc[:,0].min(axis=0),pb19.iloc[:,0].min(axis=0),pb20.iloc[:,0].min(axis=0),pb21.iloc[:,0].min(axis=0),pb22.iloc[:,0].min(axis=0)]

#Maximum
data_list['Max'] = [pb18.iloc[:,0].max(axis=0),pb19.iloc[:,0].max(axis=0),pb20.iloc[:,0].max(axis=0),pb21.iloc[:,0].max(axis=0),pb22.iloc[:,0].max(axis=0)]

#Mean
data_list['Mean'] = [pb18.iloc[:,0].mean(axis=0),pb19.iloc[:,0].mean(axis=0),pb20.iloc[:,0].mean(axis=0),pb21.iloc[:,0].mean(axis=0),pb22.iloc[:,0].mean(axis=0)]

#Quartile
data_list['Q1'] = [np.percentile(pb18.iloc[:,0], 25),np.percentile(pb19.iloc[:,0], 25),np.percentile(pb20.iloc[:,0], 25),np.percentile(pb21.iloc[:,0], 25),np.percentile(pb22.iloc[:,0], 25)]
data_list['Median'] = [np.percentile(pb18.iloc[:,0], 50),np.percentile(pb19.iloc[:,0], 50),np.percentile(pb20.iloc[:,0], 50),np.percentile(pb21.iloc[:,0], 50),np.percentile(pb22.iloc[:,0], 50)]
data_list['Q3'] = [np.percentile(pb18.iloc[:,0], 75),np.percentile(pb19.iloc[:,0], 75),np.percentile(pb20.iloc[:,0], 75),np.percentile(pb21.iloc[:,0], 75),np.percentile(pb22.iloc[:,0], 75)]

#Standard Deviation
data_list['Std'] = [pb18.iloc[:,0].std(),pb19.iloc[:,0].std(),pb20.iloc[:,0].std(),pb21.iloc[:,0].std(),pb22.iloc[:,0].std()]

df_grouped = data_list
years = df_grouped['Tahun']
df_grouped.index = ['2018','2019','2020','2021','2022']
df_grouped.drop(columns=['Tahun'])

# Assume your DataFrame is named 'df_grouped' with index column 'Year'
values1 = df_grouped['Median']
values2 = df_grouped['Mean']

# Create a line chart
fig = go.Figure()

# Add 'Mean' trace to the chart
fig.add_trace(go.Scatter(x=years, y=values1, mode='lines+markers', name='Median'))

# Add 'Median' trace to the chart
fig.add_trace(go.Scatter(x=years, y=values2, mode='lines+markers', name='Mean'))

for i in range(len(df_grouped)):
    fig.add_annotation(
        x=years[i],  # Set the x-coordinate of the annotation
        y=values1[i],  # Set the y-coordinate of the annotation
        text = format_currency(values1[i], 'IDR', locale='id_ID'),  # Set the text of the annotation to the value
        showarrow=True,  # Show an arrow pointing to the annotation
        arrowhead=0,  # Set the arrowhead style
        arrowcolor='black',  # Set the color of the arrow
        ax=0,  # Set the x-component of the arrow vector
        ay=-10,  # Set the y-component of the arrow vector
        font=dict(color='black',size=21)  # Set the font color of the annotation
    )
    fig.add_annotation(
        x=years[i],  # Set the x-coordinate of the annotation
        y=values2[i],  # Set the y-coordinate of the annotation
        text=format_currency(values2[i], 'IDR', locale='id_ID'),  # Set the text of the annotation to the value
        showarrow=True,  # Show an arrow pointing to the annotation
        arrowhead=0,  # Set the arrowhead style
        arrowcolor='black',  # Set the color of the arrow
        ax=0,  # Set the x-component of the arrow vector
        ay=-10,  # Set the y-component of the arrow vector
        font=dict(color='black',size=21)  # Set the font color of the annotation
    )

fig.update_xaxes(
    tickmode='array',  # Set the tick mode to array
    tickvals=years,  # Set the tick values to the years in the data
    tickformat='d'  # Set the tick format to display integers
)

# Remove legend title
fig.update_layout(legend_title_text='',
                  width=2000,  # Set width in pixels
                  height=1000,
                  xaxis_tickfont=dict(size=30),
                  yaxis_tickfont=dict(size=30),
                  yaxis_tickformat='Rp,.0f',
                  legend=dict(
                  font=dict(size=30),
                  orientation='h',  # Set legend orientation to horizontal
                  x=0.4,  # Set x position to 0.5 (center)
                  y=-0.1,  # Set y position to 1 (top)
                  traceorder='normal',  # Set trace order to normal
                  bgcolor='rgba(0,0,0,0)'  # Set background color to transparent
                  ))
if max(values1) > max(values2):
  num_increments = len(values1)+5
  increment = np.round(max(values2)/ (num_increments * 1000000))*(1000000)
  custom_tickvals = np.arange(0, max(values1) + 2,increment,dtype=int)
else:
  num_increments = len(values2)+5
  increment = np.round(max(values1)/ (num_increments * 1000000))*(1000000)
  custom_tickvals = np.arange(0, max(values2) + 2,increment,dtype=int)

fig.update_yaxes(tickformat=',.0f',  # Use comma as thousands separator, no decimal places
                 ticktext=[format_currency(val, 'IDR', locale='id_ID') for val in custom_tickvals],  # Use formatted currency text as tick text
                 tickvals=custom_tickvals)  # Set custom tick values
# Show plot
fig.show()
dir = "/content/drive/MyDrive/Tracer Study/{}/Omset_Wirausaha.png".format(prodi)
pio.write_image(fig, dir)

df_grouped.T